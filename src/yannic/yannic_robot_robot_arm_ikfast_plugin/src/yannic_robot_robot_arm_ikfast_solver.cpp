/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-03 21:43:46.353721
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[0]);
x5=IKsin(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=((9.99999040000768e-5)*x5);
x9=((0.999999680000154)*x5);
x10=((0.000799999744000123)*x4);
x11=((7.99999232000614e-8)*x5);
x12=((0.999999680000154)*x7);
x13=((0.000799999744000123)*x2);
x14=((0.000799999744000123)*x6);
x15=((0.000799999744000123)*x7);
x16=((0.999999680000154)*x6);
x17=(x2*x3);
x18=(x0*x3);
x19=(x0*x1);
x20=(x1*x2);
x21=((((-1.0)*x9))+x10);
x22=(x8+(((-7.99999232000614e-8)*x4)));
x23=((((6.39999385600491e-11)*x4))+(((-1.0)*x11)));
x24=(x9+(((-1.0)*x10)));
x25=((((-0.124999960000019)*x5))+(((9.99999680000154e-5)*x4)));
x26=((((0.000799999744000123)*x5))+(((0.999999680000154)*x4)));
x27=((((-1.0)*x8))+(((-0.124999880000096)*x4)));
x28=((-1.0)*x26);
x29=(x11+(((9.99999040000768e-5)*x4)));
x30=((((-9.99999680000154e-5)*x5))+(((-0.124999960000019)*x4)));
x31=((3.45599778816142e-8)*x21);
x32=((0.054)*x21);
x33=((0.999999680000154)*x25);
x34=((0.054)*x28);
x35=((0.0539999654400221)*x28);
x36=((-4.31999723520177e-5)*x21);
x37=((-4.31999723520177e-5)*x28);
x38=((((-0.054)*x17))+(((0.054)*x19)));
x39=((((-0.054)*x20))+(((-0.054)*x18)));
x40=(x20*x28);
eetrans[0]=((0.000510399996672002)+((x18*x22))+((x18*x27))+(((9.99999680000154e-5)*x19))+((x7*(((((-4.31999723520177e-5)*x17*x24))+(((-4.31999723520177e-5)*x19*x21))))))+((x2*(((((-0.18199982528014)*x4))+(((-0.000145599860224112)*x5))))))+(((-9.99999680000154e-5)*x17))+((x7*(((((0.0539999654400221)*x17*x26))+((x19*x35))))))+(((0.000145599953408022)*x0))+((x6*((((x20*x35))+((x18*x35))))))+((x15*x39))+((x14*x38))+((x2*(((((-1.16479888179289e-7)*x4))+(((0.000145599860224112)*x5))))))+((x6*((((x20*x36))+((x18*x36))))))+((x20*x22))+((x20*x27)));
eetrans[1]=((0.012999995840002)+((x6*((((x20*x37))+((x18*x37))))))+((x18*x29))+((x18*x23))+(((-0.124999960000019)*x17))+(((0.181999941760028)*x0))+((x6*((((x20*x31))+((x18*x31))))))+((x2*(((((1.16479888179289e-7)*x5))+(((0.000145599860224112)*x4))))))+((x16*x38))+((x7*(((((-4.31999723520177e-5)*x17*x26))+(((-4.31999723520177e-5)*x19*x28))))))+((x12*x39))+((x7*((((x19*x31))+(((3.45599778816142e-8)*x17*x24))))))+((x2*(((((-1.16479888179289e-7)*x5))+(((9.31839105434316e-11)*x4))))))+(((0.124999960000019)*x19))+((x20*x29))+((x20*x23)));
IkReal x41=((1.0)*x13);
IkReal x42=((0.054)*x17);
IkReal x43=((1.0)*x33);
eetrans[2]=((((-1.0)*x20*x43))+(((-1.0)*x18*x43))+(((-1.0)*x41*(((((-0.181999941760028)*x4))+(((-0.000145599953408022)*x5))))))+(((-1.0)*x12*((((x19*x32))+((x24*x42))))))+(((-1.0)*x14*((((x20*x34))+((x18*x34))))))+(((-0.000799999744000123)*x18*x30))+(((-1.0)*x16*((((x20*x32))+((x18*x32))))))+(((-0.999999680000154)*x2*(((((0.000145599953408022)*x4))+(((-0.181999941760028)*x5))))))+(((-1.0)*x15*((((x19*x34))+((x26*x42))))))+(((-1.0)*x1*x30*x41)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 4; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.000499999680000205)+(((0.99999936000041)*px))+(((-0.000799999744000123)*pz))+(((-0.000799999488000328)*py)));
new_py=((3.99999744000164e-7)+(((-0.999999680000154)*pz))+(((6.39999590400262e-7)*py))+(((-0.000799999488000328)*px)));
new_pz=((-0.013000399999872)+(((0.000799999744000123)*px))+(((0.999999680000154)*py)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=((((50.8750508750509)*(IKabs(((0.0455)+(((0.019656)*cj3)))))))+(IKabs(sj3)));
j2eval[1]=((5.35836762688615)+(sj3*sj3)+(cj3*cj3)+(((4.62962962962963)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((((50.8750508750509)*(IKabs(((0.0455)+(((0.019656)*cj3)))))))+(IKabs(sj3)));
j2eval[1]=((5.35836762688615)+(sj3*sj3)+(cj3*cj3)+(((4.62962962962963)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x44=IKPowWithIntegerCheck(pz,-1);
if(!x44.valid){
continue;
}
cj1array[0]=((-2.74725274725275)*(x44.value)*(((-0.014583)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x45=((13500.0)*pz);
IkReal x46=((31250.0)*pz);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((4635.25)+(((3375.0)*cj3))));
j2eval[2]=((IKabs(((((2457.0)*sj3))+(((-1.0)*cj3*sj1*x45))+(((-1.0)*sj1*x46))+(((-1.0)*cj1*sj3*x45)))))+(IKabs(((-5687.5)+((cj1*x46))+((cj1*cj3*x45))+(((-2457.0)*cj3))+(((-1.0)*sj1*sj3*x45))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x47=pz*pz;
IkReal x48=((1228500.0)*pz*sj1);
IkReal x49=((3375000.0)*x47);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=((IKabs(((-403632.8125)+(((7812500.0)*x47))+((cj3*x49))+(((-279838.125)*cj3))+(((-45562.5)*(cj3*cj3)))+(((-1.0)*sj3*x48)))))+(IKabs(((((45562.5)*cj3*sj3))+(((174369.375)*sj3))+(((-1.0)*cj3*x48))+(((-1.0)*sj3*x49))+(((-2843750.0)*pz*sj1))))));
j2eval[2]=IKsign(((421807.75)+(((307125.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((((1.37340740740741)*cj1))+((cj1*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x50=((13500.0)*pz);
j2eval[0]=((-1.37340740740741)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-4635.25)+(((-3375.0)*cj3))));
j2eval[2]=((IKabs(((((31250.0)*pz))+(((-2457.0)*sj3))+((cj3*x50)))))+(IKabs(((5687.5)+((sj3*x50))+(((2457.0)*cj3))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x51=pz*pz;
IkReal x52=cj3*cj3;
IkReal x53=(cj3*x51);
j2eval[0]=((-8.85888203017833)+(((-74.0740740740741)*x53))+(((-171.467764060357)*x51))+x52+(((-3.39503703703704)*cj3)));
j2eval[1]=((IKabs(((((91000000.0)*(pz*pz*pz)))+(((-223587.0)*sj3))+(((4170803.0)*pz)))))+(IKabs(((517562.5)+(((1228500.0)*pz*sj3))+(((223587.0)*cj3))))));
j2eval[2]=IKsign(((-587689.375)+(((66339.0)*x52))+(((-11375000.0)*x51))+(((-4914000.0)*x53))+(((-225223.362)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x54=pz*pz;
CheckValue<IkReal> x55=IKPowWithIntegerCheck(IKsign(((-587689.375)+(((66339.0)*(cj3*cj3)))+(((-11375000.0)*x54))+(((-4914000.0)*cj3*x54))+(((-225223.362)*cj3)))),-1);
if(!x55.valid){
continue;
}
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(((((91000000.0)*(pz*pz*pz)))+(((-223587.0)*sj3))+(((4170803.0)*pz)))),IkReal(((517562.5)+(((1228500.0)*pz*sj3))+(((223587.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x55.value)))+(x56.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x57=IKcos(j2);
IkReal x58=IKsin(j2);
IkReal x59=((0.054)*cj3);
IkReal x60=(sj3*x58);
evalcond[0]=((0.182)+(((0.125)*x57))+(((-0.054)*x60))+((x57*x59)));
evalcond[1]=((0.066248)+(((1.456)*x57*(pz*pz)))+(((0.066732848)*x57))+(((-0.019656)*x60)));
evalcond[2]=((((-0.125)*x58))+(((-1.0)*pz))+(((-1.0)*x58*x59))+(((-0.054)*sj3*x57)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x61=((13500.0)*pz);
CheckValue<IkReal> x62=IKPowWithIntegerCheck(IKsign(((-4635.25)+(((-3375.0)*cj3)))),-1);
if(!x62.valid){
continue;
}
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(((((31250.0)*pz))+(((-2457.0)*sj3))+((cj3*x61)))),IkReal(((5687.5)+((sj3*x61))+(((2457.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x62.value)))+(x63.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x64=IKcos(j2);
IkReal x65=IKsin(j2);
IkReal x66=((0.054)*cj3);
IkReal x67=(sj3*x65);
evalcond[0]=((0.182)+(((0.125)*x64))+(((-0.054)*x67))+((x64*x66)));
evalcond[1]=((0.066248)+(((0.066732848)*x64))+(((1.456)*x64*(pz*pz)))+(((-0.019656)*x67)));
evalcond[2]=((((-0.125)*x65))+(((-1.0)*pz))+(((-0.054)*sj3*x64))+(((-1.0)*x65*x66)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x68=((13500.0)*pz);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((4635.25)+(((3375.0)*cj3))));
j2eval[2]=((IKabs(((((2457.0)*sj3))+(((31250.0)*pz))+((cj3*x68)))))+(IKabs(((-5687.5)+((sj3*x68))+(((-2457.0)*cj3))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x69=pz*pz;
IkReal x70=cj3*cj3;
IkReal x71=(cj3*x69);
j2eval[0]=((8.85888203017833)+(((74.0740740740741)*x71))+(((3.39503703703704)*cj3))+(((-1.0)*x70))+(((171.467764060357)*x69)));
j2eval[1]=((IKabs(((((91000000.0)*(pz*pz*pz)))+(((4170803.0)*pz))+(((223587.0)*sj3)))))+(IKabs(((-517562.5)+(((1228500.0)*pz*sj3))+(((-223587.0)*cj3))))));
j2eval[2]=IKsign(((587689.375)+(((11375000.0)*x69))+(((-66339.0)*x70))+(((4914000.0)*x71))+(((225223.362)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x72=pz*pz;
CheckValue<IkReal> x73 = IKatan2WithCheck(IkReal(((((91000000.0)*(pz*pz*pz)))+(((4170803.0)*pz))+(((223587.0)*sj3)))),IkReal(((-517562.5)+(((1228500.0)*pz*sj3))+(((-223587.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x73.valid){
continue;
}
CheckValue<IkReal> x74=IKPowWithIntegerCheck(IKsign(((587689.375)+(((11375000.0)*x72))+(((-66339.0)*(cj3*cj3)))+(((225223.362)*cj3))+(((4914000.0)*cj3*x72)))),-1);
if(!x74.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x73.value)+(((1.5707963267949)*(x74.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x75=IKcos(j2);
IkReal x76=IKsin(j2);
IkReal x77=((0.054)*cj3);
IkReal x78=(sj3*x76);
evalcond[0]=((0.182)+((x75*x77))+(((0.125)*x75))+(((-0.054)*x78)));
evalcond[1]=((0.066248)+(((0.066732848)*x75))+(((-0.019656)*x78))+(((1.456)*x75*(pz*pz))));
evalcond[2]=((((-1.0)*pz))+(((0.054)*sj3*x75))+((x76*x77))+(((0.125)*x76)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x79=((13500.0)*pz);
CheckValue<IkReal> x80=IKPowWithIntegerCheck(IKsign(((4635.25)+(((3375.0)*cj3)))),-1);
if(!x80.valid){
continue;
}
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(((((2457.0)*sj3))+(((31250.0)*pz))+((cj3*x79)))),IkReal(((-5687.5)+((sj3*x79))+(((-2457.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x80.value)))+(x81.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x82=IKcos(j2);
IkReal x83=IKsin(j2);
IkReal x84=((0.054)*cj3);
IkReal x85=(sj3*x83);
evalcond[0]=((0.182)+((x82*x84))+(((0.125)*x82))+(((-0.054)*x85)));
evalcond[1]=((0.066248)+(((0.066732848)*x82))+(((1.456)*x82*(pz*pz)))+(((-0.019656)*x85)));
evalcond[2]=((((0.125)*x83))+(((0.054)*sj3*x82))+(((-1.0)*pz))+((x83*x84)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x86=cj1*cj1;
IkReal x87=(cj1*cj3);
IkReal x88=(pz*sj1);
IkReal x89=(cj1*sj3);
IkReal x90=(pz*x86);
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((((6.75)*x87))+(((9.2705)*cj1))),-1);
if(!x91.valid){
continue;
}
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((((-4635.25)*cj1))+(((-3375.0)*x87))),-1);
if(!x92.valid){
continue;
}
if( IKabs(((x91.value)*(((((-27.0)*sj3*x90))+(((-27.0)*x87*x88))+(((4.914)*x89))+(((-62.5)*cj1*x88)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x92.value)*(((((-31250.0)*x90))+(((2457.0)*x87))+(((13500.0)*x88*x89))+(((-13500.0)*cj3*x90))+(((5687.5)*cj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x91.value)*(((((-27.0)*sj3*x90))+(((-27.0)*x87*x88))+(((4.914)*x89))+(((-62.5)*cj1*x88))))))+IKsqr(((x92.value)*(((((-31250.0)*x90))+(((2457.0)*x87))+(((13500.0)*x88*x89))+(((-13500.0)*cj3*x90))+(((5687.5)*cj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x91.value)*(((((-27.0)*sj3*x90))+(((-27.0)*x87*x88))+(((4.914)*x89))+(((-62.5)*cj1*x88))))), ((x92.value)*(((((-31250.0)*x90))+(((2457.0)*x87))+(((13500.0)*x88*x89))+(((-13500.0)*cj3*x90))+(((5687.5)*cj1))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x93=IKsin(j2);
IkReal x94=IKcos(j2);
IkReal x95=((0.054)*cj3);
IkReal x96=((1.0)*pz);
IkReal x97=((0.054)*sj3);
IkReal x98=((0.125)*x94);
IkReal x99=(cj1*x93);
IkReal x100=(sj3*x93);
IkReal x101=(cj1*x94);
IkReal x102=((0.125)*x93);
IkReal x103=(sj1*x94);
evalcond[0]=(x102+((x93*x95))+((pz*sj1))+((x94*x97)));
evalcond[1]=((0.182)+x98+(((-1.0)*cj1*x96))+(((-1.0)*x93*x97))+((x94*x95)));
evalcond[2]=((0.051665)+(((-1.0)*pz*x96))+(((0.0455)*x94))+(((0.019656)*cj3*x94))+(((0.0135)*cj3))+(((-0.019656)*x100)));
evalcond[3]=((((0.125)*x99))+((x103*x95))+((x101*x97))+(((-1.0)*sj1*x93*x97))+((sj1*x98))+((x95*x99))+(((0.182)*sj1)));
evalcond[4]=((((-1.0)*x103*x97))+((x101*x95))+(((-1.0)*sj1*x93*x95))+(((0.182)*cj1))+(((-1.0)*x96))+((cj1*x98))+(((-1.0)*x97*x99))+(((-1.0)*sj1*x102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x104=pz*pz;
IkReal x105=(pz*sj1);
IkReal x106=((3375000.0)*x104);
CheckValue<IkReal> x107 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x106))+(((45562.5)*cj3*sj3))+(((174369.375)*sj3))+(((-2843750.0)*x105))+(((-1228500.0)*cj3*x105)))),IkReal(((-403632.8125)+(((-1228500.0)*sj3*x105))+((cj3*x106))+(((7812500.0)*x104))+(((-279838.125)*cj3))+(((-45562.5)*(cj3*cj3))))),IKFAST_ATAN2_MAGTHRESH);
if(!x107.valid){
continue;
}
CheckValue<IkReal> x108=IKPowWithIntegerCheck(IKsign(((421807.75)+(((307125.0)*cj3)))),-1);
if(!x108.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x107.value)+(((1.5707963267949)*(x108.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x109=IKsin(j2);
IkReal x110=IKcos(j2);
IkReal x111=((0.054)*cj3);
IkReal x112=((1.0)*pz);
IkReal x113=((0.054)*sj3);
IkReal x114=((0.125)*x110);
IkReal x115=(cj1*x109);
IkReal x116=(sj3*x109);
IkReal x117=(cj1*x110);
IkReal x118=((0.125)*x109);
IkReal x119=(sj1*x110);
evalcond[0]=(((x110*x113))+((x109*x111))+x118+((pz*sj1)));
evalcond[1]=((0.182)+(((-1.0)*cj1*x112))+((x110*x111))+x114+(((-1.0)*x109*x113)));
evalcond[2]=((0.051665)+(((0.019656)*cj3*x110))+(((0.0135)*cj3))+(((-0.019656)*x116))+(((0.0455)*x110))+(((-1.0)*pz*x112)));
evalcond[3]=(((sj1*x114))+((x111*x115))+((x111*x119))+((x113*x117))+(((0.125)*x115))+(((-1.0)*sj1*x109*x113))+(((0.182)*sj1)));
evalcond[4]=((((-1.0)*sj1*x118))+((cj1*x114))+((x111*x117))+(((-1.0)*x113*x119))+(((-1.0)*x113*x115))+(((-1.0)*x112))+(((-1.0)*sj1*x109*x111))+(((0.182)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x120=((31250.0)*pz);
IkReal x121=((13500.0)*pz*sj3);
IkReal x122=((13500.0)*cj3*pz);
CheckValue<IkReal> x123=IKPowWithIntegerCheck(IKsign(((4635.25)+(((3375.0)*cj3)))),-1);
if(!x123.valid){
continue;
}
CheckValue<IkReal> x124 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x120))+(((-1.0)*sj1*x122))+(((2457.0)*sj3))+(((-1.0)*cj1*x121)))),IkReal(((-5687.5)+((cj1*x122))+((cj1*x120))+(((-1.0)*sj1*x121))+(((-2457.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x124.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x123.value)))+(x124.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x125=IKsin(j2);
IkReal x126=IKcos(j2);
IkReal x127=((0.054)*cj3);
IkReal x128=((1.0)*pz);
IkReal x129=((0.054)*sj3);
IkReal x130=((0.125)*x126);
IkReal x131=(cj1*x125);
IkReal x132=(sj3*x125);
IkReal x133=(cj1*x126);
IkReal x134=((0.125)*x125);
IkReal x135=(sj1*x126);
evalcond[0]=(x134+((x125*x127))+((x126*x129))+((pz*sj1)));
evalcond[1]=((0.182)+x130+(((-1.0)*x125*x129))+((x126*x127))+(((-1.0)*cj1*x128)));
evalcond[2]=((0.051665)+(((0.019656)*cj3*x126))+(((-1.0)*pz*x128))+(((-0.019656)*x132))+(((0.0135)*cj3))+(((0.0455)*x126)));
evalcond[3]=(((x127*x131))+((x127*x135))+((x129*x133))+(((0.125)*x131))+(((-1.0)*sj1*x125*x129))+(((0.182)*sj1))+((sj1*x130)));
evalcond[4]=(((x127*x133))+(((-1.0)*sj1*x134))+(((-1.0)*x128))+(((-1.0)*sj1*x125*x127))+(((0.182)*cj1))+(((-1.0)*x129*x135))+(((-1.0)*x129*x131))+((cj1*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x136=((0.0455)+(((0.019656)*cj3)));
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(x136),IkReal(((-0.019656)*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
IkReal x137=((1.0)*(x139.value));
if((((((0.000386358336)*(sj3*sj3)))+(x136*x136))) < -0.00001)
continue;
CheckValue<IkReal> x140=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.000386358336)*(sj3*sj3)))+(x136*x136)))),-1);
if(!x140.valid){
continue;
}
if( (((x140.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x140.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x138=IKasin(((x140.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))))));
j2array[0]=((((-1.0)*x137))+(((-1.0)*x138)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x138+(((-1.0)*x137)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x141=((0.054)*sj3);
IkReal x142=((0.054)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((0.182)+((cj2*x142))+(((-1.0)*sj2*x141))+(((0.125)*cj2)))))+(IKabs(((((-1.0)*cj2*x141))+(((-1.0)*sj2*x142))+(((-0.125)*sj2))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x143=(cj2*pz);
j1eval[0]=((((-1.0)*pz*sj2*sj3))+((cj3*x143))+(((3.37037037037037)*pz))+(((2.31481481481481)*x143)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x144=((0.054)*sj3);
j1eval[0]=((IKabs(((((-1.0)*cj2*x144))+(((-0.183332)*sj2)))))+(IKabs(((0.182)+(((-1.0)*sj2*x144))+(((0.183332)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x145=((0.054)*sj3);
j1eval[0]=((IKabs(((0.182)+(((-1.0)*sj2*x145))+(((0.183332)*cj2)))))+(IKabs((((cj2*x145))+(((0.183332)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x146=((0.054)*sj3);
CheckValue<IkReal> x148 = IKatan2WithCheck(IkReal((((cj2*x146))+(((0.183332)*sj2)))),IkReal(((0.182)+(((-1.0)*sj2*x146))+(((0.183332)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x148.valid){
continue;
}
IkReal x147=x148.value;
j1array[0]=((-1.0)*x147);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x147)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x149=IKcos(j1);
IkReal x150=IKsin(j1);
IkReal x151=((0.054)*sj3);
evalcond[0]=((((0.182)*x149))+(((0.183332)*cj2*x149))+(((-1.0)*sj2*x149*x151))+(((-0.183332)*sj2*x150))+(((-1.0)*cj2*x150*x151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x152=((0.054)*sj3);
CheckValue<IkReal> x154 = IKatan2WithCheck(IkReal(((0.182)+(((-1.0)*sj2*x152))+(((0.183332)*cj2)))),IkReal(((((-1.0)*cj2*x152))+(((-0.183332)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x154.valid){
continue;
}
IkReal x153=x154.value;
j1array[0]=((-1.0)*x153);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x153)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x155=IKsin(j1);
IkReal x156=IKcos(j1);
IkReal x157=((0.054)*sj3);
evalcond[0]=((((0.182)*x155))+(((0.183332)*cj2*x155))+((cj2*x156*x157))+(((0.183332)*sj2*x156))+(((-1.0)*sj2*x155*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x158=pz*pz;
IkReal x159=(cj3*sj2);
IkReal x160=(cj2*sj3);
IkReal x161=(cj2*pz);
IkReal x162=((13.5)*x158);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(((((-4.914)*pz*sj2*sj3))+(((11.375)*x161))+(((4.914)*cj3*x161))+(((16.562)*pz))),-1);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164=IKPowWithIntegerCheck(pz,-1);
if(!x164.valid){
continue;
}
if( IKabs(((x163.value)*(((((0.18225)*cj3*x160))+(((-1.0)*x159*x162))+(((-1.0)*x160*x162))+(((0.2250045)*x159))+(((-0.1968705)*x160))+(((-31.25)*sj2*x158))+(((0.18225)*cj3*x159))+(((-0.45571875)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*(x164.value)*(((3.64575)+(((250.0)*x158))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x163.value)*(((((0.18225)*cj3*x160))+(((-1.0)*x159*x162))+(((-1.0)*x160*x162))+(((0.2250045)*x159))+(((-0.1968705)*x160))+(((-31.25)*sj2*x158))+(((0.18225)*cj3*x159))+(((-0.45571875)*sj2))))))+IKsqr(((0.010989010989011)*(x164.value)*(((3.64575)+(((250.0)*x158))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x163.value)*(((((0.18225)*cj3*x160))+(((-1.0)*x159*x162))+(((-1.0)*x160*x162))+(((0.2250045)*x159))+(((-0.1968705)*x160))+(((-31.25)*sj2*x158))+(((0.18225)*cj3*x159))+(((-0.45571875)*sj2))))), ((0.010989010989011)*(x164.value)*(((3.64575)+(((250.0)*x158))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x165=IKcos(j1);
IkReal x166=IKsin(j1);
IkReal x167=((0.125)*cj2);
IkReal x168=((0.054)*cj3);
IkReal x169=((0.125)*sj2);
IkReal x170=((0.054)*sj3);
IkReal x171=(cj2*x170);
IkReal x172=(sj2*x166);
IkReal x173=(pz*x165);
IkReal x174=(sj2*x165);
evalcond[0]=((-0.014583)+(((0.364)*x173))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x166))+x171+x169+((sj2*x168)));
evalcond[2]=((0.182)+(((-1.0)*x173))+((cj2*x168))+x167+(((-1.0)*sj2*x170)));
evalcond[3]=(((x168*x174))+(((0.182)*x166))+(((-1.0)*x170*x172))+((x166*x167))+((x165*x171))+((x165*x169))+((cj2*x166*x168)));
evalcond[4]=((((-1.0)*x166*x169))+(((0.182)*x165))+(((-1.0)*x170*x174))+(((-1.0)*pz))+((x165*x167))+(((-1.0)*x168*x172))+((cj2*x165*x168))+(((-1.0)*x166*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x176=IKPowWithIntegerCheck(pz,-1);
if(!x176.valid){
continue;
}
IkReal x175=x176.value;
CheckValue<IkReal> x177=IKPowWithIntegerCheck(x175,-2);
if(!x177.valid){
continue;
}
if( IKabs((x175*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*x175*(((3.64575)+(((250.0)*(x177.value)))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x175*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))))+IKsqr(((0.010989010989011)*x175*(((3.64575)+(((250.0)*(x177.value)))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x175*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))), ((0.010989010989011)*x175*(((3.64575)+(((250.0)*(x177.value)))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x178=IKcos(j1);
IkReal x179=IKsin(j1);
IkReal x180=((0.125)*cj2);
IkReal x181=((0.054)*cj3);
IkReal x182=((0.125)*sj2);
IkReal x183=((0.054)*sj3);
IkReal x184=(cj2*x183);
IkReal x185=(sj2*x179);
IkReal x186=(pz*x178);
IkReal x187=(sj2*x178);
evalcond[0]=((-0.014583)+(((0.364)*x186))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x179))+((sj2*x181))+x184+x182);
evalcond[2]=((0.182)+(((-1.0)*x186))+x180+((cj2*x181))+(((-1.0)*sj2*x183)));
evalcond[3]=(((x178*x182))+((x178*x184))+((x179*x180))+((cj2*x179*x181))+(((0.182)*x179))+(((-1.0)*x183*x185))+((x181*x187)));
evalcond[4]=(((x178*x180))+(((0.182)*x178))+(((-1.0)*pz))+((cj2*x178*x181))+(((-1.0)*x179*x182))+(((-1.0)*x179*x184))+(((-1.0)*x183*x187))+(((-1.0)*x181*x185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x188=((0.054)*sj3);
IkReal x189=((0.054)*cj3);
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x189))+(((-1.0)*cj2*x188))+(((-0.125)*sj2)))),IkReal(((0.182)+((cj2*x189))+(((-1.0)*sj2*x188))+(((0.125)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x191.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x190.value)+(((1.5707963267949)*(x191.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x192=IKcos(j1);
IkReal x193=IKsin(j1);
IkReal x194=((0.125)*cj2);
IkReal x195=((0.054)*cj3);
IkReal x196=((0.125)*sj2);
IkReal x197=((0.054)*sj3);
IkReal x198=(cj2*x197);
IkReal x199=(sj2*x193);
IkReal x200=(pz*x192);
IkReal x201=(sj2*x192);
evalcond[0]=((-0.014583)+(((0.364)*x200))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((sj2*x195))+x198+x196+((pz*x193)));
evalcond[2]=((0.182)+x194+((cj2*x195))+(((-1.0)*sj2*x197))+(((-1.0)*x200)));
evalcond[3]=(((x193*x194))+((x195*x201))+((cj2*x193*x195))+(((-1.0)*x197*x199))+(((0.182)*x193))+((x192*x196))+((x192*x198)));
evalcond[4]=((((-1.0)*x195*x199))+(((-1.0)*x197*x201))+(((0.182)*x192))+(((-1.0)*pz))+((x192*x194))+((cj2*x192*x195))+(((-1.0)*x193*x198))+(((-1.0)*x193*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((((50.8750508750509)*(IKabs(((0.0455)+(((0.019656)*cj3)))))))+(IKabs(sj3)));
j2eval[1]=((5.35836762688615)+(sj3*sj3)+(cj3*cj3)+(((4.62962962962963)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x202=IKPowWithIntegerCheck(pz,-1);
if(!x202.valid){
continue;
}
cj1array[0]=((-2.74725274725275)*(x202.value)*(((-0.014583)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x203=((13500.0)*pz);
IkReal x204=((31250.0)*pz);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((4635.25)+(((3375.0)*cj3))));
j2eval[2]=((IKabs(((((2457.0)*sj3))+(((-1.0)*cj1*sj3*x203))+(((-1.0)*sj1*x204))+(((-1.0)*cj3*sj1*x203)))))+(IKabs(((-5687.5)+((cj1*x204))+(((-1.0)*sj1*sj3*x203))+(((-2457.0)*cj3))+((cj1*cj3*x203))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x205=pz*pz;
IkReal x206=((1228500.0)*pz*sj1);
IkReal x207=((3375000.0)*x205);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=((IKabs(((((45562.5)*cj3*sj3))+(((174369.375)*sj3))+(((-2843750.0)*pz*sj1))+(((-1.0)*cj3*x206))+(((-1.0)*sj3*x207)))))+(IKabs(((-403632.8125)+((cj3*x207))+(((-279838.125)*cj3))+(((7812500.0)*x205))+(((-45562.5)*(cj3*cj3)))+(((-1.0)*sj3*x206))))));
j2eval[2]=IKsign(((421807.75)+(((307125.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=((((1.37340740740741)*cj1))+((cj1*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x208=((13500.0)*pz);
j2eval[0]=((-1.37340740740741)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-4635.25)+(((-3375.0)*cj3))));
j2eval[2]=((IKabs(((5687.5)+((sj3*x208))+(((2457.0)*cj3)))))+(IKabs((((cj3*x208))+(((31250.0)*pz))+(((-2457.0)*sj3))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x209=pz*pz;
IkReal x210=cj3*cj3;
IkReal x211=(cj3*x209);
j2eval[0]=((-8.85888203017833)+(((-74.0740740740741)*x211))+x210+(((-171.467764060357)*x209))+(((-3.39503703703704)*cj3)));
j2eval[1]=((IKabs(((((91000000.0)*(pz*pz*pz)))+(((-223587.0)*sj3))+(((4170803.0)*pz)))))+(IKabs(((517562.5)+(((1228500.0)*pz*sj3))+(((223587.0)*cj3))))));
j2eval[2]=IKsign(((-587689.375)+(((-11375000.0)*x209))+(((66339.0)*x210))+(((-4914000.0)*x211))+(((-225223.362)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x212=pz*pz;
CheckValue<IkReal> x213=IKPowWithIntegerCheck(IKsign(((-587689.375)+(((66339.0)*(cj3*cj3)))+(((-11375000.0)*x212))+(((-4914000.0)*cj3*x212))+(((-225223.362)*cj3)))),-1);
if(!x213.valid){
continue;
}
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(((((91000000.0)*(pz*pz*pz)))+(((-223587.0)*sj3))+(((4170803.0)*pz)))),IkReal(((517562.5)+(((1228500.0)*pz*sj3))+(((223587.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x213.value)))+(x214.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x215=IKcos(j2);
IkReal x216=IKsin(j2);
IkReal x217=((0.054)*cj3);
IkReal x218=(sj3*x216);
evalcond[0]=((0.182)+(((-0.054)*x218))+(((0.125)*x215))+((x215*x217)));
evalcond[1]=((0.066248)+(((1.456)*x215*(pz*pz)))+(((0.066732848)*x215))+(((-0.019656)*x218)));
evalcond[2]=((((-0.125)*x216))+(((-1.0)*pz))+(((-1.0)*x216*x217))+(((-0.054)*sj3*x215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x219=((13500.0)*pz);
CheckValue<IkReal> x220 = IKatan2WithCheck(IkReal((((cj3*x219))+(((31250.0)*pz))+(((-2457.0)*sj3)))),IkReal(((5687.5)+(((2457.0)*cj3))+((sj3*x219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221=IKPowWithIntegerCheck(IKsign(((-4635.25)+(((-3375.0)*cj3)))),-1);
if(!x221.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x220.value)+(((1.5707963267949)*(x221.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x222=IKcos(j2);
IkReal x223=IKsin(j2);
IkReal x224=((0.054)*cj3);
IkReal x225=(sj3*x223);
evalcond[0]=((0.182)+((x222*x224))+(((-0.054)*x225))+(((0.125)*x222)));
evalcond[1]=((0.066248)+(((-0.019656)*x225))+(((0.066732848)*x222))+(((1.456)*x222*(pz*pz))));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x223*x224))+(((-0.054)*sj3*x222))+(((-0.125)*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x226=((13500.0)*pz);
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((4635.25)+(((3375.0)*cj3))));
j2eval[2]=((IKabs(((-5687.5)+(((-2457.0)*cj3))+((sj3*x226)))))+(IKabs((((cj3*x226))+(((2457.0)*sj3))+(((31250.0)*pz))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
px=0;
py=0;
pp=pz*pz;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x227=pz*pz;
IkReal x228=cj3*cj3;
IkReal x229=(cj3*x227);
j2eval[0]=((8.85888203017833)+(((3.39503703703704)*cj3))+(((74.0740740740741)*x229))+(((171.467764060357)*x227))+(((-1.0)*x228)));
j2eval[1]=((IKabs(((((91000000.0)*(pz*pz*pz)))+(((4170803.0)*pz))+(((223587.0)*sj3)))))+(IKabs(((-517562.5)+(((1228500.0)*pz*sj3))+(((-223587.0)*cj3))))));
j2eval[2]=IKsign(((587689.375)+(((-66339.0)*x228))+(((11375000.0)*x227))+(((4914000.0)*x229))+(((225223.362)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x230=pz*pz;
CheckValue<IkReal> x231 = IKatan2WithCheck(IkReal(((((91000000.0)*(pz*pz*pz)))+(((4170803.0)*pz))+(((223587.0)*sj3)))),IkReal(((-517562.5)+(((1228500.0)*pz*sj3))+(((-223587.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x231.valid){
continue;
}
CheckValue<IkReal> x232=IKPowWithIntegerCheck(IKsign(((587689.375)+(((11375000.0)*x230))+(((4914000.0)*cj3*x230))+(((-66339.0)*(cj3*cj3)))+(((225223.362)*cj3)))),-1);
if(!x232.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x231.value)+(((1.5707963267949)*(x232.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x233=IKcos(j2);
IkReal x234=IKsin(j2);
IkReal x235=((0.054)*cj3);
IkReal x236=(sj3*x234);
evalcond[0]=((0.182)+((x233*x235))+(((0.125)*x233))+(((-0.054)*x236)));
evalcond[1]=((0.066248)+(((-0.019656)*x236))+(((0.066732848)*x233))+(((1.456)*x233*(pz*pz))));
evalcond[2]=(((x234*x235))+(((0.054)*sj3*x233))+(((-1.0)*pz))+(((0.125)*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x237=((13500.0)*pz);
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((4635.25)+(((3375.0)*cj3)))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239 = IKatan2WithCheck(IkReal((((cj3*x237))+(((2457.0)*sj3))+(((31250.0)*pz)))),IkReal(((-5687.5)+(((-2457.0)*cj3))+((sj3*x237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x239.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x238.value)))+(x239.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x240=IKcos(j2);
IkReal x241=IKsin(j2);
IkReal x242=((0.054)*cj3);
IkReal x243=(sj3*x241);
evalcond[0]=((0.182)+((x240*x242))+(((0.125)*x240))+(((-0.054)*x243)));
evalcond[1]=((0.066248)+(((1.456)*x240*(pz*pz)))+(((-0.019656)*x243))+(((0.066732848)*x240)));
evalcond[2]=((((0.125)*x241))+(((-1.0)*pz))+((x241*x242))+(((0.054)*sj3*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x244=cj1*cj1;
IkReal x245=(cj1*cj3);
IkReal x246=(pz*sj1);
IkReal x247=(cj1*sj3);
IkReal x248=(pz*x244);
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((((9.2705)*cj1))+(((6.75)*x245))),-1);
if(!x249.valid){
continue;
}
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((((-4635.25)*cj1))+(((-3375.0)*x245))),-1);
if(!x250.valid){
continue;
}
if( IKabs(((x249.value)*(((((-27.0)*x245*x246))+(((4.914)*x247))+(((-27.0)*sj3*x248))+(((-62.5)*cj1*x246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x250.value)*(((((-13500.0)*cj3*x248))+(((-31250.0)*x248))+(((13500.0)*x246*x247))+(((2457.0)*x245))+(((5687.5)*cj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x249.value)*(((((-27.0)*x245*x246))+(((4.914)*x247))+(((-27.0)*sj3*x248))+(((-62.5)*cj1*x246))))))+IKsqr(((x250.value)*(((((-13500.0)*cj3*x248))+(((-31250.0)*x248))+(((13500.0)*x246*x247))+(((2457.0)*x245))+(((5687.5)*cj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x249.value)*(((((-27.0)*x245*x246))+(((4.914)*x247))+(((-27.0)*sj3*x248))+(((-62.5)*cj1*x246))))), ((x250.value)*(((((-13500.0)*cj3*x248))+(((-31250.0)*x248))+(((13500.0)*x246*x247))+(((2457.0)*x245))+(((5687.5)*cj1))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x251=IKsin(j2);
IkReal x252=IKcos(j2);
IkReal x253=((0.054)*cj3);
IkReal x254=((1.0)*pz);
IkReal x255=((0.054)*sj3);
IkReal x256=((0.125)*x252);
IkReal x257=(cj1*x251);
IkReal x258=(sj3*x251);
IkReal x259=(cj1*x252);
IkReal x260=((0.125)*x251);
IkReal x261=(sj1*x252);
evalcond[0]=(((x251*x253))+x260+((x252*x255))+((pz*sj1)));
evalcond[1]=((0.182)+(((-1.0)*x251*x255))+x256+(((-1.0)*cj1*x254))+((x252*x253)));
evalcond[2]=((0.051665)+(((-0.019656)*x258))+(((0.0455)*x252))+(((0.019656)*cj3*x252))+(((-1.0)*pz*x254))+(((0.0135)*cj3)));
evalcond[3]=((((-1.0)*sj1*x251*x255))+((x253*x261))+((sj1*x256))+((x253*x257))+(((0.182)*sj1))+((x255*x259))+(((0.125)*x257)));
evalcond[4]=((((-1.0)*x255*x261))+(((-1.0)*sj1*x251*x253))+(((-1.0)*sj1*x260))+((cj1*x256))+(((-1.0)*x255*x257))+((x253*x259))+(((0.182)*cj1))+(((-1.0)*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x262=pz*pz;
IkReal x263=(pz*sj1);
IkReal x264=((3375000.0)*x262);
CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal(((((45562.5)*cj3*sj3))+(((-1.0)*sj3*x264))+(((174369.375)*sj3))+(((-2843750.0)*x263))+(((-1228500.0)*cj3*x263)))),IkReal(((-403632.8125)+(((-279838.125)*cj3))+(((-45562.5)*(cj3*cj3)))+((cj3*x264))+(((-1228500.0)*sj3*x263))+(((7812500.0)*x262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x265.valid){
continue;
}
CheckValue<IkReal> x266=IKPowWithIntegerCheck(IKsign(((421807.75)+(((307125.0)*cj3)))),-1);
if(!x266.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x265.value)+(((1.5707963267949)*(x266.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x267=IKsin(j2);
IkReal x268=IKcos(j2);
IkReal x269=((0.054)*cj3);
IkReal x270=((1.0)*pz);
IkReal x271=((0.054)*sj3);
IkReal x272=((0.125)*x268);
IkReal x273=(cj1*x267);
IkReal x274=(sj3*x267);
IkReal x275=(cj1*x268);
IkReal x276=((0.125)*x267);
IkReal x277=(sj1*x268);
evalcond[0]=(((x267*x269))+x276+((pz*sj1))+((x268*x271)));
evalcond[1]=((0.182)+(((-1.0)*cj1*x270))+x272+(((-1.0)*x267*x271))+((x268*x269)));
evalcond[2]=((0.051665)+(((-1.0)*pz*x270))+(((-0.019656)*x274))+(((0.0135)*cj3))+(((0.019656)*cj3*x268))+(((0.0455)*x268)));
evalcond[3]=(((x271*x275))+(((0.125)*x273))+(((0.182)*sj1))+((x269*x277))+((x269*x273))+(((-1.0)*sj1*x267*x271))+((sj1*x272)));
evalcond[4]=((((-1.0)*sj1*x276))+(((-1.0)*x271*x273))+(((-1.0)*x271*x277))+((cj1*x272))+(((0.182)*cj1))+(((-1.0)*x270))+((x269*x275))+(((-1.0)*sj1*x267*x269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x278=((31250.0)*pz);
IkReal x279=((13500.0)*pz*sj3);
IkReal x280=((13500.0)*cj3*pz);
CheckValue<IkReal> x281=IKPowWithIntegerCheck(IKsign(((4635.25)+(((3375.0)*cj3)))),-1);
if(!x281.valid){
continue;
}
CheckValue<IkReal> x282 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x280))+(((-1.0)*sj1*x278))+(((2457.0)*sj3))+(((-1.0)*cj1*x279)))),IkReal(((-5687.5)+(((-1.0)*sj1*x279))+((cj1*x278))+(((-2457.0)*cj3))+((cj1*x280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x282.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x281.value)))+(x282.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x283=IKsin(j2);
IkReal x284=IKcos(j2);
IkReal x285=((0.054)*cj3);
IkReal x286=((1.0)*pz);
IkReal x287=((0.054)*sj3);
IkReal x288=((0.125)*x284);
IkReal x289=(cj1*x283);
IkReal x290=(sj3*x283);
IkReal x291=(cj1*x284);
IkReal x292=((0.125)*x283);
IkReal x293=(sj1*x284);
evalcond[0]=(((x284*x287))+x292+((pz*sj1))+((x283*x285)));
evalcond[1]=((0.182)+((x284*x285))+x288+(((-1.0)*cj1*x286))+(((-1.0)*x283*x287)));
evalcond[2]=((0.051665)+(((-0.019656)*x290))+(((0.0135)*cj3))+(((-1.0)*pz*x286))+(((0.019656)*cj3*x284))+(((0.0455)*x284)));
evalcond[3]=((((0.125)*x289))+((x285*x289))+((x287*x291))+((x285*x293))+(((-1.0)*sj1*x283*x287))+(((0.182)*sj1))+((sj1*x288)));
evalcond[4]=((((-1.0)*x287*x289))+((x285*x291))+(((0.182)*cj1))+(((-1.0)*sj1*x292))+(((-1.0)*x287*x293))+(((-1.0)*sj1*x283*x285))+(((-1.0)*x286))+((cj1*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x294=((0.0455)+(((0.019656)*cj3)));
CheckValue<IkReal> x297 = IKatan2WithCheck(IkReal(x294),IkReal(((-0.019656)*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x297.valid){
continue;
}
IkReal x295=((1.0)*(x297.value));
if((((((0.000386358336)*(sj3*sj3)))+(x294*x294))) < -0.00001)
continue;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.000386358336)*(sj3*sj3)))+(x294*x294)))),-1);
if(!x298.valid){
continue;
}
if( (((x298.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x298.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x296=IKasin(((x298.value)*(((0.051665)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))))));
j2array[0]=((((-1.0)*x296))+(((-1.0)*x295)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x295))+x296);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x299=((0.054)*sj3);
IkReal x300=((0.054)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((0.182)+((cj2*x300))+(((-1.0)*sj2*x299))+(((0.125)*cj2)))))+(IKabs(((((-1.0)*sj2*x300))+(((-1.0)*cj2*x299))+(((-0.125)*sj2))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x301=(cj2*pz);
j1eval[0]=((((-1.0)*pz*sj2*sj3))+(((2.31481481481481)*x301))+((cj3*x301))+(((3.37037037037037)*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x302=((0.054)*sj3);
j1eval[0]=((IKabs(((((-1.0)*cj2*x302))+(((-0.183332)*sj2)))))+(IKabs(((0.182)+(((-1.0)*sj2*x302))+(((0.183332)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x303=((0.054)*sj3);
j1eval[0]=((IKabs(((0.182)+(((-1.0)*sj2*x303))+(((0.183332)*cj2)))))+(IKabs((((cj2*x303))+(((0.183332)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x304=((0.054)*sj3);
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal((((cj2*x304))+(((0.183332)*sj2)))),IkReal(((0.182)+(((-1.0)*sj2*x304))+(((0.183332)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
IkReal x305=x306.value;
j1array[0]=((-1.0)*x305);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x305)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x307=IKcos(j1);
IkReal x308=IKsin(j1);
IkReal x309=((0.054)*sj3);
evalcond[0]=((((-1.0)*cj2*x308*x309))+(((0.182)*x307))+(((-0.183332)*sj2*x308))+(((0.183332)*cj2*x307))+(((-1.0)*sj2*x307*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x310=((0.054)*sj3);
CheckValue<IkReal> x312 = IKatan2WithCheck(IkReal(((0.182)+(((-1.0)*sj2*x310))+(((0.183332)*cj2)))),IkReal(((((-0.183332)*sj2))+(((-1.0)*cj2*x310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x312.valid){
continue;
}
IkReal x311=x312.value;
j1array[0]=((-1.0)*x311);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x311)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x313=IKsin(j1);
IkReal x314=IKcos(j1);
IkReal x315=((0.054)*sj3);
evalcond[0]=(((cj2*x314*x315))+(((0.183332)*cj2*x313))+(((0.182)*x313))+(((0.183332)*sj2*x314))+(((-1.0)*sj2*x313*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x316=pz*pz;
IkReal x317=(cj3*sj2);
IkReal x318=(cj2*sj3);
IkReal x319=(cj2*pz);
IkReal x320=((13.5)*x316);
CheckValue<IkReal> x321=IKPowWithIntegerCheck(((((-4.914)*pz*sj2*sj3))+(((4.914)*cj3*x319))+(((11.375)*x319))+(((16.562)*pz))),-1);
if(!x321.valid){
continue;
}
CheckValue<IkReal> x322=IKPowWithIntegerCheck(pz,-1);
if(!x322.valid){
continue;
}
if( IKabs(((x321.value)*(((((-1.0)*x317*x320))+(((0.18225)*cj3*x317))+(((0.18225)*cj3*x318))+(((-1.0)*x318*x320))+(((-0.1968705)*x318))+(((0.2250045)*x317))+(((-31.25)*sj2*x316))+(((-0.45571875)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*(x322.value)*(((3.64575)+(((-3.375)*cj3))+(((250.0)*x316)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x321.value)*(((((-1.0)*x317*x320))+(((0.18225)*cj3*x317))+(((0.18225)*cj3*x318))+(((-1.0)*x318*x320))+(((-0.1968705)*x318))+(((0.2250045)*x317))+(((-31.25)*sj2*x316))+(((-0.45571875)*sj2))))))+IKsqr(((0.010989010989011)*(x322.value)*(((3.64575)+(((-3.375)*cj3))+(((250.0)*x316))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x321.value)*(((((-1.0)*x317*x320))+(((0.18225)*cj3*x317))+(((0.18225)*cj3*x318))+(((-1.0)*x318*x320))+(((-0.1968705)*x318))+(((0.2250045)*x317))+(((-31.25)*sj2*x316))+(((-0.45571875)*sj2))))), ((0.010989010989011)*(x322.value)*(((3.64575)+(((-3.375)*cj3))+(((250.0)*x316))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x323=IKcos(j1);
IkReal x324=IKsin(j1);
IkReal x325=((0.125)*cj2);
IkReal x326=((0.054)*cj3);
IkReal x327=((0.125)*sj2);
IkReal x328=((0.054)*sj3);
IkReal x329=(cj2*x328);
IkReal x330=(sj2*x324);
IkReal x331=(pz*x323);
IkReal x332=(sj2*x323);
evalcond[0]=((-0.014583)+(((0.364)*x331))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x324))+x327+x329+((sj2*x326)));
evalcond[2]=((0.182)+((cj2*x326))+x325+(((-1.0)*x331))+(((-1.0)*sj2*x328)));
evalcond[3]=(((x323*x329))+((x323*x327))+(((-1.0)*x328*x330))+((x324*x325))+((x326*x332))+((cj2*x324*x326))+(((0.182)*x324)));
evalcond[4]=(((cj2*x323*x326))+((x323*x325))+(((-1.0)*x328*x332))+(((-1.0)*pz))+(((-1.0)*x324*x327))+(((-1.0)*x324*x329))+(((-1.0)*x326*x330))+(((0.182)*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x334=IKPowWithIntegerCheck(pz,-1);
if(!x334.valid){
continue;
}
IkReal x333=x334.value;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(x333,-2);
if(!x335.valid){
continue;
}
if( IKabs((x333*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*x333*(((3.64575)+(((250.0)*(x335.value)))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x333*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))))+IKsqr(((0.010989010989011)*x333*(((3.64575)+(((250.0)*(x335.value)))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x333*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))), ((0.010989010989011)*x333*(((3.64575)+(((250.0)*(x335.value)))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x336=IKcos(j1);
IkReal x337=IKsin(j1);
IkReal x338=((0.125)*cj2);
IkReal x339=((0.054)*cj3);
IkReal x340=((0.125)*sj2);
IkReal x341=((0.054)*sj3);
IkReal x342=(cj2*x341);
IkReal x343=(sj2*x337);
IkReal x344=(pz*x336);
IkReal x345=(sj2*x336);
evalcond[0]=((-0.014583)+(((-1.0)*(pz*pz)))+(((0.364)*x344))+(((0.0135)*cj3)));
evalcond[1]=(((sj2*x339))+x342+x340+((pz*x337)));
evalcond[2]=((0.182)+((cj2*x339))+x338+(((-1.0)*x344))+(((-1.0)*sj2*x341)));
evalcond[3]=(((cj2*x337*x339))+((x336*x342))+((x336*x340))+((x337*x338))+(((0.182)*x337))+(((-1.0)*x341*x343))+((x339*x345)));
evalcond[4]=(((cj2*x336*x339))+((x336*x338))+(((0.182)*x336))+(((-1.0)*x337*x342))+(((-1.0)*x337*x340))+(((-1.0)*pz))+(((-1.0)*x341*x345))+(((-1.0)*x339*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x346=((0.054)*sj3);
IkReal x347=((0.054)*cj3);
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal(((((-0.125)*sj2))+(((-1.0)*cj2*x346))+(((-1.0)*sj2*x347)))),IkReal(((0.182)+((cj2*x347))+(((0.125)*cj2))+(((-1.0)*sj2*x346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x349.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x348.value)+(((1.5707963267949)*(x349.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x350=IKcos(j1);
IkReal x351=IKsin(j1);
IkReal x352=((0.125)*cj2);
IkReal x353=((0.054)*cj3);
IkReal x354=((0.125)*sj2);
IkReal x355=((0.054)*sj3);
IkReal x356=(cj2*x355);
IkReal x357=(sj2*x351);
IkReal x358=(pz*x350);
IkReal x359=(sj2*x350);
evalcond[0]=((-0.014583)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.364)*x358)));
evalcond[1]=(((pz*x351))+((sj2*x353))+x354+x356);
evalcond[2]=((0.182)+(((-1.0)*sj2*x355))+(((-1.0)*x358))+x352+((cj2*x353)));
evalcond[3]=(((x353*x359))+((x351*x352))+((cj2*x351*x353))+((x350*x356))+((x350*x354))+(((0.182)*x351))+(((-1.0)*x355*x357)));
evalcond[4]=(((cj2*x350*x353))+(((-1.0)*pz))+((x350*x352))+(((-1.0)*x353*x357))+(((-1.0)*x351*x356))+(((-1.0)*x351*x354))+(((0.182)*x350))+(((-1.0)*x355*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x360=((0.0455)+(((0.019656)*cj3)));
CheckValue<IkReal> x363 = IKatan2WithCheck(IkReal(x360),IkReal(((-0.019656)*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x363.valid){
continue;
}
IkReal x361=((1.0)*(x363.value));
if((((((0.000386358336)*(sj3*sj3)))+(x360*x360))) < -0.00001)
continue;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.000386358336)*(sj3*sj3)))+(x360*x360)))),-1);
if(!x364.valid){
continue;
}
if( (((x364.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((x364.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x362=IKasin(((x364.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))))));
j2array[0]=((((-1.0)*x362))+(((-1.0)*x361)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x361))+x362);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x365=sj2*sj2;
IkReal x366=cj2*cj2;
IkReal x367=sj3*sj3;
IkReal x368=cj3*cj3;
IkReal x369=((0.054)*cj2);
IkReal x370=((4.62962962962963)*cj3);
IkReal x371=((0.054)*sj2);
j1eval[0]=((11.3593964334705)+(((-6.74074074074074)*sj2*sj3))+(((5.35836762688615)*x366))+(((5.35836762688615)*x365))+((x366*x368))+((x366*x367))+((x365*x370))+(((15.6035665294925)*cj2))+((x365*x367))+((x365*x368))+((x366*x370))+(((6.74074074074074)*cj2*cj3)));
j1eval[1]=((IKabs(((((-1.0)*sj3*x369))+(((-1.0)*cj3*x371))+(((-0.125)*sj2)))))+(IKabs(((0.182)+(((-1.0)*sj3*x371))+((cj3*x369))+(((0.125)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x372=((0.054)*sj3);
IkReal x373=((0.054)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((((-1.0)*sj2*x373))+(((-0.125)*sj2))+(((-1.0)*cj2*x372)))))+(IKabs(((0.182)+(((-1.0)*sj2*x372))+((cj2*x373))+(((0.125)*cj2))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x374=(cj2*pz);
j1eval[0]=((((-1.0)*pz*sj2*sj3))+(((2.31481481481481)*x374))+(((3.37037037037037)*pz))+((cj3*x374)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x375=((0.054)*sj3);
j1eval[0]=((IKabs(((((-0.183332)*sj2))+(((-1.0)*cj2*x375)))))+(IKabs(((0.182)+(((-1.0)*sj2*x375))+(((0.183332)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x376=((0.054)*sj3);
j1eval[0]=((IKabs((((cj2*x376))+(((0.183332)*sj2)))))+(IKabs(((0.182)+(((-1.0)*sj2*x376))+(((0.183332)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x377=((0.054)*sj3);
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal((((cj2*x377))+(((0.183332)*sj2)))),IkReal(((0.182)+(((-1.0)*sj2*x377))+(((0.183332)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
IkReal x378=x379.value;
j1array[0]=((-1.0)*x378);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x378)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x380=IKcos(j1);
IkReal x381=IKsin(j1);
IkReal x382=((0.054)*sj3);
evalcond[0]=((((0.183332)*cj2*x380))+(((-1.0)*sj2*x380*x382))+(((0.182)*x380))+(((-0.183332)*sj2*x381))+(((-1.0)*cj2*x381*x382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x383=((0.054)*sj3);
CheckValue<IkReal> x385 = IKatan2WithCheck(IkReal(((0.182)+(((-1.0)*sj2*x383))+(((0.183332)*cj2)))),IkReal(((((-1.0)*cj2*x383))+(((-0.183332)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x385.valid){
continue;
}
IkReal x384=x385.value;
j1array[0]=((-1.0)*x384);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x384)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x386=IKsin(j1);
IkReal x387=IKcos(j1);
IkReal x388=((0.054)*sj3);
evalcond[0]=((((0.183332)*cj2*x386))+(((0.183332)*sj2*x387))+(((0.182)*x386))+(((-1.0)*sj2*x386*x388))+((cj2*x387*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x389=pz*pz;
IkReal x390=(cj3*sj2);
IkReal x391=(cj2*sj3);
IkReal x392=(cj2*pz);
IkReal x393=((13.5)*x389);
CheckValue<IkReal> x394=IKPowWithIntegerCheck(((((-4.914)*pz*sj2*sj3))+(((11.375)*x392))+(((4.914)*cj3*x392))+(((16.562)*pz))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395=IKPowWithIntegerCheck(pz,-1);
if(!x395.valid){
continue;
}
if( IKabs(((x394.value)*(((((-0.1968705)*x391))+(((-31.25)*sj2*x389))+(((-1.0)*x391*x393))+(((0.18225)*cj3*x390))+(((0.18225)*cj3*x391))+(((-1.0)*x390*x393))+(((0.2250045)*x390))+(((-0.45571875)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*(x395.value)*(((3.64575)+(((250.0)*x389))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x394.value)*(((((-0.1968705)*x391))+(((-31.25)*sj2*x389))+(((-1.0)*x391*x393))+(((0.18225)*cj3*x390))+(((0.18225)*cj3*x391))+(((-1.0)*x390*x393))+(((0.2250045)*x390))+(((-0.45571875)*sj2))))))+IKsqr(((0.010989010989011)*(x395.value)*(((3.64575)+(((250.0)*x389))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x394.value)*(((((-0.1968705)*x391))+(((-31.25)*sj2*x389))+(((-1.0)*x391*x393))+(((0.18225)*cj3*x390))+(((0.18225)*cj3*x391))+(((-1.0)*x390*x393))+(((0.2250045)*x390))+(((-0.45571875)*sj2))))), ((0.010989010989011)*(x395.value)*(((3.64575)+(((250.0)*x389))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x396=IKcos(j1);
IkReal x397=IKsin(j1);
IkReal x398=((0.125)*cj2);
IkReal x399=((0.054)*cj3);
IkReal x400=((0.125)*sj2);
IkReal x401=((0.054)*sj3);
IkReal x402=(cj2*x401);
IkReal x403=(sj2*x397);
IkReal x404=(pz*x396);
IkReal x405=(sj2*x396);
evalcond[0]=((-0.014583)+(((0.364)*x404))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x397))+((sj2*x399))+x400+x402);
evalcond[2]=((0.182)+x398+((cj2*x399))+(((-1.0)*sj2*x401))+(((-1.0)*x404)));
evalcond[3]=((((-1.0)*x401*x403))+((x397*x398))+((x399*x405))+((cj2*x397*x399))+((x396*x402))+((x396*x400))+(((0.182)*x397)));
evalcond[4]=(((x396*x398))+(((-1.0)*x401*x405))+(((-1.0)*pz))+(((-1.0)*x399*x403))+(((-1.0)*x397*x400))+(((-1.0)*x397*x402))+((cj2*x396*x399))+(((0.182)*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x407=IKPowWithIntegerCheck(pz,-1);
if(!x407.valid){
continue;
}
IkReal x406=x407.value;
CheckValue<IkReal> x408=IKPowWithIntegerCheck(x406,-2);
if(!x408.valid){
continue;
}
if( IKabs((x406*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*x406*(((3.64575)+(((-3.375)*cj3))+(((250.0)*(x408.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x406*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))))+IKsqr(((0.010989010989011)*x406*(((3.64575)+(((-3.375)*cj3))+(((250.0)*(x408.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x406*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))), ((0.010989010989011)*x406*(((3.64575)+(((-3.375)*cj3))+(((250.0)*(x408.value)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x409=IKcos(j1);
IkReal x410=IKsin(j1);
IkReal x411=((0.125)*cj2);
IkReal x412=((0.054)*cj3);
IkReal x413=((0.125)*sj2);
IkReal x414=((0.054)*sj3);
IkReal x415=(cj2*x414);
IkReal x416=(sj2*x410);
IkReal x417=(pz*x409);
IkReal x418=(sj2*x409);
evalcond[0]=((-0.014583)+(((0.364)*x417))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x410))+((sj2*x412))+x413+x415);
evalcond[2]=((0.182)+x411+((cj2*x412))+(((-1.0)*sj2*x414))+(((-1.0)*x417)));
evalcond[3]=((((0.182)*x410))+((x410*x411))+((x409*x413))+((x409*x415))+((cj2*x410*x412))+((x412*x418))+(((-1.0)*x414*x416)));
evalcond[4]=((((-1.0)*x412*x416))+(((0.182)*x409))+((x409*x411))+((cj2*x409*x412))+(((-1.0)*pz))+(((-1.0)*x410*x415))+(((-1.0)*x410*x413))+(((-1.0)*x414*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x419=((0.054)*sj3);
IkReal x420=((0.054)*cj3);
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x420))+(((-1.0)*cj2*x419))+(((-0.125)*sj2)))),IkReal(((0.182)+((cj2*x420))+(((0.125)*cj2))+(((-1.0)*sj2*x419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x422.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x421.value)+(((1.5707963267949)*(x422.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x423=IKcos(j1);
IkReal x424=IKsin(j1);
IkReal x425=((0.125)*cj2);
IkReal x426=((0.054)*cj3);
IkReal x427=((0.125)*sj2);
IkReal x428=((0.054)*sj3);
IkReal x429=(cj2*x428);
IkReal x430=(sj2*x424);
IkReal x431=(pz*x423);
IkReal x432=(sj2*x423);
evalcond[0]=((-0.014583)+(((0.364)*x431))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x424))+x429+x427+((sj2*x426)));
evalcond[2]=((0.182)+(((-1.0)*sj2*x428))+(((-1.0)*x431))+x425+((cj2*x426)));
evalcond[3]=(((cj2*x424*x426))+((x424*x425))+((x426*x432))+(((0.182)*x424))+((x423*x427))+((x423*x429))+(((-1.0)*x428*x430)));
evalcond[4]=(((cj2*x423*x426))+(((-1.0)*pz))+(((-1.0)*x426*x430))+(((0.182)*x423))+(((-1.0)*x424*x429))+(((-1.0)*x424*x427))+((x423*x425))+(((-1.0)*x428*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
IkReal x433=((0.054)*sj3);
IkReal x434=((0.054)*cj3);
j1eval[0]=pz;
j1eval[1]=((IKabs(((0.182)+((cj2*x434))+(((0.125)*cj2))+(((-1.0)*sj2*x433)))))+(IKabs(((((-1.0)*cj2*x433))+(((-0.125)*sj2))+(((-1.0)*sj2*x434))))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x435=(cj2*pz);
j1eval[0]=((((-1.0)*pz*sj2*sj3))+(((2.31481481481481)*x435))+((cj3*x435))+(((3.37037037037037)*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x436=((0.054)*sj3);
j1eval[0]=((IKabs(((((-1.0)*cj2*x436))+(((-0.183332)*sj2)))))+(IKabs(((0.182)+(((0.183332)*cj2))+(((-1.0)*sj2*x436))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
IkReal x437=((0.054)*sj3);
j1eval[0]=((IKabs((((cj2*x437))+(((0.183332)*sj2)))))+(IKabs(((0.182)+(((0.183332)*cj2))+(((-1.0)*sj2*x437))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x438=((0.054)*sj3);
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal((((cj2*x438))+(((0.183332)*sj2)))),IkReal(((0.182)+(((0.183332)*cj2))+(((-1.0)*sj2*x438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal x439=x440.value;
j1array[0]=((-1.0)*x439);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x439)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x441=IKcos(j1);
IkReal x442=IKsin(j1);
IkReal x443=((0.054)*sj3);
evalcond[0]=((((-0.183332)*sj2*x442))+(((0.183332)*cj2*x441))+(((-1.0)*cj2*x442*x443))+(((0.182)*x441))+(((-1.0)*sj2*x441*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x444=((0.054)*sj3);
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((0.182)+(((-1.0)*sj2*x444))+(((0.183332)*cj2)))),IkReal(((((-1.0)*cj2*x444))+(((-0.183332)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
IkReal x445=x446.value;
j1array[0]=((-1.0)*x445);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x445)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x447=IKsin(j1);
IkReal x448=IKcos(j1);
IkReal x449=((0.054)*sj3);
evalcond[0]=((((0.183332)*cj2*x447))+(((0.182)*x447))+(((-1.0)*sj2*x447*x449))+((cj2*x448*x449))+(((0.183332)*sj2*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x450=pz*pz;
IkReal x451=(cj3*sj2);
IkReal x452=(cj2*sj3);
IkReal x453=(cj2*pz);
IkReal x454=((13.5)*x450);
CheckValue<IkReal> x455=IKPowWithIntegerCheck(((((-4.914)*pz*sj2*sj3))+(((4.914)*cj3*x453))+(((11.375)*x453))+(((16.562)*pz))),-1);
if(!x455.valid){
continue;
}
CheckValue<IkReal> x456=IKPowWithIntegerCheck(pz,-1);
if(!x456.valid){
continue;
}
if( IKabs(((x455.value)*(((((0.18225)*cj3*x452))+(((0.18225)*cj3*x451))+(((0.2250045)*x451))+(((-1.0)*x452*x454))+(((-1.0)*x451*x454))+(((-0.1968705)*x452))+(((-0.45571875)*sj2))+(((-31.25)*sj2*x450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*(x456.value)*(((3.64575)+(((250.0)*x450))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x455.value)*(((((0.18225)*cj3*x452))+(((0.18225)*cj3*x451))+(((0.2250045)*x451))+(((-1.0)*x452*x454))+(((-1.0)*x451*x454))+(((-0.1968705)*x452))+(((-0.45571875)*sj2))+(((-31.25)*sj2*x450))))))+IKsqr(((0.010989010989011)*(x456.value)*(((3.64575)+(((250.0)*x450))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x455.value)*(((((0.18225)*cj3*x452))+(((0.18225)*cj3*x451))+(((0.2250045)*x451))+(((-1.0)*x452*x454))+(((-1.0)*x451*x454))+(((-0.1968705)*x452))+(((-0.45571875)*sj2))+(((-31.25)*sj2*x450))))), ((0.010989010989011)*(x456.value)*(((3.64575)+(((250.0)*x450))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x457=IKcos(j1);
IkReal x458=IKsin(j1);
IkReal x459=((0.125)*cj2);
IkReal x460=((0.054)*cj3);
IkReal x461=((0.125)*sj2);
IkReal x462=((0.054)*sj3);
IkReal x463=(cj2*x462);
IkReal x464=(sj2*x458);
IkReal x465=(pz*x457);
IkReal x466=(sj2*x457);
evalcond[0]=((-0.014583)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.364)*x465)));
evalcond[1]=(x463+x461+((pz*x458))+((sj2*x460)));
evalcond[2]=((0.182)+(((-1.0)*x465))+((cj2*x460))+(((-1.0)*sj2*x462))+x459);
evalcond[3]=((((-1.0)*x462*x464))+((cj2*x458*x460))+((x460*x466))+((x458*x459))+(((0.182)*x458))+((x457*x463))+((x457*x461)));
evalcond[4]=((((-1.0)*x462*x466))+(((-1.0)*x460*x464))+((cj2*x457*x460))+(((-1.0)*pz))+(((-1.0)*x458*x461))+(((-1.0)*x458*x463))+(((0.182)*x457))+((x457*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x468=IKPowWithIntegerCheck(pz,-1);
if(!x468.valid){
continue;
}
IkReal x467=x468.value;
CheckValue<IkReal> x469=IKPowWithIntegerCheck(x467,-2);
if(!x469.valid){
continue;
}
if( IKabs((x467*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.010989010989011)*x467*(((3.64575)+(((250.0)*(x469.value)))+(((-3.375)*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x467*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))))+IKsqr(((0.010989010989011)*x467*(((3.64575)+(((250.0)*(x469.value)))+(((-3.375)*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x467*(((((-0.054)*cj3*sj2))+(((-0.054)*cj2*sj3))+(((-0.125)*sj2))))), ((0.010989010989011)*x467*(((3.64575)+(((250.0)*(x469.value)))+(((-3.375)*cj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x470=IKcos(j1);
IkReal x471=IKsin(j1);
IkReal x472=((0.125)*cj2);
IkReal x473=((0.054)*cj3);
IkReal x474=((0.125)*sj2);
IkReal x475=((0.054)*sj3);
IkReal x476=(cj2*x475);
IkReal x477=(sj2*x471);
IkReal x478=(pz*x470);
IkReal x479=(sj2*x470);
evalcond[0]=((-0.014583)+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.364)*x478)));
evalcond[1]=(x474+x476+((pz*x471))+((sj2*x473)));
evalcond[2]=((0.182)+(((-1.0)*sj2*x475))+((cj2*x473))+(((-1.0)*x478))+x472);
evalcond[3]=(((x471*x472))+((x473*x479))+((x470*x474))+((x470*x476))+(((-1.0)*x475*x477))+((cj2*x471*x473))+(((0.182)*x471)));
evalcond[4]=(((x470*x472))+(((-1.0)*x475*x479))+(((-1.0)*x473*x477))+(((-1.0)*pz))+((cj2*x470*x473))+(((-1.0)*x471*x476))+(((-1.0)*x471*x474))+(((0.182)*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x480=((0.054)*sj3);
IkReal x481=((0.054)*cj3);
CheckValue<IkReal> x482 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x480))+(((-1.0)*sj2*x481))+(((-0.125)*sj2)))),IkReal(((0.182)+((cj2*x481))+(((-1.0)*sj2*x480))+(((0.125)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x482.valid){
continue;
}
CheckValue<IkReal> x483=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x483.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x482.value)+(((1.5707963267949)*(x483.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x484=IKcos(j1);
IkReal x485=IKsin(j1);
IkReal x486=((0.125)*cj2);
IkReal x487=((0.054)*cj3);
IkReal x488=((0.125)*sj2);
IkReal x489=((0.054)*sj3);
IkReal x490=(cj2*x489);
IkReal x491=(sj2*x485);
IkReal x492=(pz*x484);
IkReal x493=(sj2*x484);
evalcond[0]=((-0.014583)+(((0.364)*x492))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3)));
evalcond[1]=(((pz*x485))+x488+x490+((sj2*x487)));
evalcond[2]=((0.182)+((cj2*x487))+(((-1.0)*sj2*x489))+(((-1.0)*x492))+x486);
evalcond[3]=(((x485*x486))+((x484*x488))+(((-1.0)*x489*x491))+(((0.182)*x485))+((cj2*x485*x487))+((x484*x490))+((x487*x493)));
evalcond[4]=(((x484*x486))+((cj2*x484*x487))+(((-1.0)*x489*x493))+(((0.182)*x484))+(((-1.0)*pz))+(((-1.0)*x487*x491))+(((-1.0)*x485*x490))+(((-1.0)*x485*x488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x494=((0.054)*sj3);
IkReal x495=((0.054)*cj3);
IkReal x496=((0.182)+(((-1.0)*sj2*x494))+(((0.125)*cj2))+((cj2*x495)));
IkReal x497=((((-1.0)*sj2*x495))+(((-1.0)*cj2*x494))+(((-0.125)*sj2)));
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(x496),IkReal(x497),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
IkReal x498=((1.0)*(x500.value));
if((((x496*x496)+(x497*x497))) < -0.00001)
continue;
CheckValue<IkReal> x501=IKPowWithIntegerCheck(IKabs(IKsqrt(((x496*x496)+(x497*x497)))),-1);
if(!x501.valid){
continue;
}
if( ((pz*(x501.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x501.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x499=IKasin((pz*(x501.value)));
j1array[0]=((((-1.0)*x498))+x499);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x498))+(((-1.0)*x499)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x502=((1.0)*cj1);
IkReal x503=((((-1.0)*x502*(px*px)))+(((-1.0)*x502*(py*py))));
j0eval[0]=x503;
j0eval[1]=IKsign(x503);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x504=((1.0)*sj1);
IkReal x505=((((-1.0)*x504*(px*px)))+(((-1.0)*x504*(py*py))));
j0eval[0]=x505;
j0eval[1]=IKsign(x505);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x506=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
j0eval[0]=x506;
j0eval[1]=IKsign(x506);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x507=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
j0eval[0]=x507;
j0eval[1]=IKsign(x507);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x508=(px*sj2);
IkReal x509=(py*sj2);
IkReal x510=((4.31999861760066e-5)*cj3);
IkReal x511=((0.0539999827200083)*cj3);
IkReal x512=((4.31999861760066e-5)*cj2*sj3);
IkReal x513=((0.0539999827200083)*cj2*sj3);
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py))))),-1);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal((((px*x512))+(((9.99999680000154e-5)*x508))+((py*x513))+(((0.124999960000019)*x509))+((x508*x510))+((x509*x511)))),IkReal((((px*x513))+(((0.124999960000019)*x508))+(((-1.0)*py*x512))+(((-9.99999680000154e-5)*x509))+((x508*x511))+(((-1.0)*x509*x510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x514.value)))+(x515.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x516=IKcos(j0);
IkReal x517=IKsin(j0);
IkReal x518=((0.999999680000154)*py);
IkReal x519=((0.000799999744000123)*px);
IkReal x520=((0.999999680000154)*px);
IkReal x521=((0.000799999744000123)*py);
evalcond[0]=(((x517*x521))+(((-1.0)*x517*x520))+((x516*x519))+((x516*x518)));
evalcond[1]=(((x516*x520))+(((0.125)*sj2))+((x517*x518))+((x517*x519))+(((0.054)*cj2*sj3))+(((-1.0)*x516*x521))+(((0.054)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x522=((px*px)+(py*py));
j0eval[0]=x522;
j0eval[1]=IKsign(x522);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x523=(px*sj2);
IkReal x524=(py*sj2);
IkReal x525=((4.31999861760066e-5)*cj3);
IkReal x526=((0.0539999827200083)*cj3);
IkReal x527=((4.31999861760066e-5)*cj2*sj3);
IkReal x528=((0.0539999827200083)*cj2*sj3);
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530 = IKatan2WithCheck(IkReal((((px*x527))+((x524*x526))+((x523*x525))+(((0.124999960000019)*x524))+(((9.99999680000154e-5)*x523))+((py*x528)))),IkReal(((((-1.0)*x524*x525))+(((-9.99999680000154e-5)*x524))+((px*x528))+(((-1.0)*py*x527))+((x523*x526))+(((0.124999960000019)*x523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x530.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x529.value)))+(x530.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x531=IKcos(j0);
IkReal x532=IKsin(j0);
IkReal x533=((0.999999680000154)*py);
IkReal x534=((0.000799999744000123)*px);
IkReal x535=((0.999999680000154)*px);
IkReal x536=((0.000799999744000123)*py);
evalcond[0]=((((-1.0)*x532*x535))+((x531*x533))+((x531*x534))+((x532*x536)));
evalcond[1]=((((-1.0)*x532*x533))+(((-1.0)*x532*x534))+(((-1.0)*x531*x535))+((x531*x536))+(((0.125)*sj2))+(((0.054)*cj2*sj3))+(((0.054)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x537=((((-1.0)*(px*px)))+(((-1.0)*(py*py))));
j0eval[0]=x537;
j0eval[1]=IKsign(x537);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x538=((0.124999960000019)*cj2);
IkReal x539=((4.31999861760066e-5)*px);
IkReal x540=(cj2*cj3);
IkReal x541=(sj2*sj3);
IkReal x542=((4.31999861760066e-5)*py);
IkReal x543=((0.0539999827200083)*py);
IkReal x544=((0.0539999827200083)*px);
IkReal x545=((9.99999680000154e-5)*cj2);
CheckValue<IkReal> x546=IKPowWithIntegerCheck(IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py))))),-1);
if(!x546.valid){
continue;
}
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((((-1.0)*x541*x543))+((x539*x540))+(((-1.0)*x539*x541))+(((0.181999941760028)*py))+((x540*x543))+((px*x545))+(((0.000145599953408022)*px))+((py*x538)))),IkReal(((((-1.0)*x541*x544))+((x541*x542))+(((0.181999941760028)*px))+((x540*x544))+(((-1.0)*x540*x542))+(((-0.000145599953408022)*py))+((px*x538))+(((-1.0)*py*x545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x546.value)))+(x547.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x548=IKcos(j0);
IkReal x549=IKsin(j0);
IkReal x550=(py*x549);
IkReal x551=(px*x549);
IkReal x552=(py*x548);
IkReal x553=(px*x548);
evalcond[0]=((((0.000799999744000123)*x550))+(((0.000799999744000123)*x553))+(((-0.999999680000154)*x551))+(((0.999999680000154)*x552)));
evalcond[1]=((0.182)+(((-0.054)*sj2*sj3))+(((0.000799999744000123)*x551))+(((0.054)*cj2*cj3))+(((0.125)*cj2))+(((0.999999680000154)*x553))+(((0.999999680000154)*x550))+(((-0.000799999744000123)*x552)));
evalcond[2]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.363999883520056)*x550))+(((-0.363999883520056)*x553))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-0.000291199906816045)*x551))+(((-1.0)*(py*py)))+(((0.000291199906816045)*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x554=((px*px)+(py*py));
j0eval[0]=x554;
j0eval[1]=IKsign(x554);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x555=((0.124999960000019)*cj2);
IkReal x556=(cj2*cj3);
IkReal x557=((4.31999861760066e-5)*px);
IkReal x558=((0.0539999827200083)*px);
IkReal x559=((9.99999680000154e-5)*cj2);
IkReal x560=(sj2*sj3);
IkReal x561=(py*x560);
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal((((py*x555))+(((0.181999941760028)*py))+((px*x559))+(((-1.0)*x557*x560))+(((-0.0539999827200083)*x561))+((x556*x557))+(((0.0539999827200083)*py*x556))+(((0.000145599953408022)*px)))),IkReal(((((0.181999941760028)*px))+(((-1.0)*x558*x560))+((px*x555))+(((-0.000145599953408022)*py))+(((-1.0)*py*x559))+(((-4.31999861760066e-5)*py*x556))+((x556*x558))+(((4.31999861760066e-5)*x561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x563.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x562.value)+(((1.5707963267949)*(x563.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x564=IKcos(j0);
IkReal x565=IKsin(j0);
IkReal x566=((0.000799999744000123)*px);
IkReal x567=(py*x565);
IkReal x568=(py*x564);
IkReal x569=(px*x565);
IkReal x570=(px*x564);
evalcond[0]=((((-0.999999680000154)*x569))+((x564*x566))+(((0.999999680000154)*x568))+(((0.000799999744000123)*x567)));
evalcond[1]=((0.182)+(((-0.054)*sj2*sj3))+(((-0.999999680000154)*x567))+(((-0.999999680000154)*x570))+(((0.054)*cj2*cj3))+(((0.125)*cj2))+(((0.000799999744000123)*x568))+(((-1.0)*x565*x566)));
evalcond[2]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.000291199906816045)*x568))+(((0.363999883520056)*x567))+(((0.000291199906816045)*x569))+(((0.363999883520056)*x570))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x571=(cj1*sj3);
IkReal x572=((0.181999941760028)*sj1);
IkReal x573=(px*sj1);
IkReal x574=((0.124999960000019)*cj2);
IkReal x575=(cj3*sj1);
IkReal x576=(sj2*sj3);
IkReal x577=((4.31999861760066e-5)*cj2);
IkReal x578=(py*sj1);
IkReal x579=((9.99999680000154e-5)*cj2);
IkReal x580=((4.31999861760066e-5)*cj3);
IkReal x581=((0.0539999827200083)*cj3);
IkReal x582=((0.0539999827200083)*cj2*py);
IkReal x583=(cj1*px*sj2);
IkReal x584=(cj1*py*sj2);
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign(((((-1.0)*(px*px)))+(((-1.0)*(py*py))))),-1);
if(!x585.valid){
continue;
}
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(((((0.124999960000019)*x584))+((x581*x584))+((cj3*x573*x577))+((x580*x583))+((px*x571*x577))+((py*x572))+(((0.000145599953408022)*x573))+((x574*x578))+(((-0.0539999827200083)*x576*x578))+((x573*x579))+((x575*x582))+(((9.99999680000154e-5)*x583))+((x571*x582))+(((-4.31999861760066e-5)*x573*x576)))),IkReal(((((-1.0)*x578*x579))+(((0.124999960000019)*x583))+(((-1.0)*x580*x584))+((x581*x583))+(((-9.99999680000154e-5)*x584))+((px*x572))+(((4.31999861760066e-5)*x576*x578))+(((-0.0539999827200083)*x573*x576))+((x573*x574))+(((-0.000145599953408022)*x578))+((cj2*x573*x581))+(((-1.0)*py*x571*x577))+(((0.0539999827200083)*cj2*px*x571))+(((-1.0)*py*x575*x577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x585.value)))+(x586.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x587=IKcos(j0);
IkReal x588=IKsin(j0);
IkReal x589=((0.054)*sj3);
IkReal x590=((0.000799999744000123)*sj1);
IkReal x591=((0.125)*sj2);
IkReal x592=((0.125)*cj2);
IkReal x593=((0.000799999744000123)*cj1);
IkReal x594=((0.363999883520056)*sj1);
IkReal x595=(cj1*pz);
IkReal x596=((0.000291199906816045)*sj1);
IkReal x597=((0.054)*cj3);
IkReal x598=((0.999999680000154)*x587);
IkReal x599=(px*x588);
IkReal x600=(px*x587);
IkReal x601=(py*x588);
IkReal x602=(py*x587);
evalcond[0]=(((py*x598))+(((-0.999999680000154)*x599))+(((0.000799999744000123)*x600))+(((0.000799999744000123)*x601)));
evalcond[1]=((((0.999999680000154)*cj1*x601))+(((-1.0)*x593*x602))+((cj1*px*x598))+x591+((pz*sj1))+((sj2*x597))+((cj2*x589))+((x593*x599)));
evalcond[2]=((0.182)+(((-1.0)*sj2*x589))+(((-1.0)*x590*x602))+(((0.999999680000154)*sj1*x601))+(((-1.0)*x595))+((px*sj1*x598))+((cj2*x597))+x592+((x590*x599)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-1.0)*x596*x599))+(((0.364)*x595))+((x596*x602))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))+(((-1.0)*x594*x600))+(((-1.0)*x594*x601)));
evalcond[4]=((((0.999999680000154)*x601))+((cj1*x591))+((cj2*sj1*x597))+((cj1*cj2*x589))+((sj1*x592))+(((0.182)*sj1))+((px*x598))+((cj1*sj2*x597))+(((-1.0)*sj1*sj2*x589))+(((0.000799999744000123)*x599))+(((-0.000799999744000123)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x603=((0.0539999827200083)*px);
IkReal x604=(cj2*cj3);
IkReal x605=(cj2*py);
IkReal x606=(sj2*sj3);
IkReal x607=((1.0)*sj1);
IkReal x608=(cj2*px);
IkReal x609=((4.31999861760066e-5)*px);
IkReal x610=((0.000799999744000123)*cj1*pz);
IkReal x611=(py*x604);
IkReal x612=((0.999999680000154)*cj1*pz);
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(((((9.99999680000154e-5)*x608))+((x604*x609))+(((0.181999941760028)*py))+(((0.0539999827200083)*x611))+(((-1.0)*py*x612))+(((-1.0)*x606*x609))+(((0.124999960000019)*x605))+(((-1.0)*px*x610))+(((-0.0539999827200083)*py*x606))+(((0.000145599953408022)*px)))),IkReal(((((-9.99999680000154e-5)*x605))+(((-1.0)*x603*x606))+(((0.181999941760028)*px))+(((-4.31999861760066e-5)*x611))+(((-0.000145599953408022)*py))+((x603*x604))+((py*x610))+(((4.31999861760066e-5)*py*x606))+(((0.124999960000019)*x608))+(((-1.0)*px*x612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
CheckValue<IkReal> x614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x607*(px*px)))+(((-1.0)*x607*(py*py))))),-1);
if(!x614.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x613.value)+(((1.5707963267949)*(x614.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x615=IKcos(j0);
IkReal x616=IKsin(j0);
IkReal x617=((0.054)*sj3);
IkReal x618=((0.000799999744000123)*sj1);
IkReal x619=((0.125)*sj2);
IkReal x620=((0.125)*cj2);
IkReal x621=((0.000799999744000123)*cj1);
IkReal x622=((0.363999883520056)*sj1);
IkReal x623=(cj1*pz);
IkReal x624=((0.000291199906816045)*sj1);
IkReal x625=((0.054)*cj3);
IkReal x626=((0.999999680000154)*x615);
IkReal x627=(px*x616);
IkReal x628=(px*x615);
IkReal x629=(py*x616);
IkReal x630=(py*x615);
evalcond[0]=(((py*x626))+(((-0.999999680000154)*x627))+(((0.000799999744000123)*x629))+(((0.000799999744000123)*x628)));
evalcond[1]=((((-1.0)*x621*x630))+((cj2*x617))+((cj1*px*x626))+((sj2*x625))+x619+((x621*x627))+((pz*sj1))+(((0.999999680000154)*cj1*x629)));
evalcond[2]=((0.182)+((px*sj1*x626))+(((-1.0)*sj2*x617))+((x618*x627))+(((0.999999680000154)*sj1*x629))+x620+(((-1.0)*x618*x630))+(((-1.0)*x623))+((cj2*x625)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-1.0)*x622*x629))+(((-1.0)*x622*x628))+(((-1.0)*x624*x627))+(((-1.0)*(pz*pz)))+((x624*x630))+(((0.0135)*cj3))+(((-1.0)*(py*py)))+(((0.364)*x623)));
evalcond[4]=((((-1.0)*sj1*sj2*x617))+((cj2*sj1*x625))+((cj1*cj2*x617))+(((-0.000799999744000123)*x630))+(((0.000799999744000123)*x627))+((cj1*sj2*x625))+((sj1*x620))+(((0.999999680000154)*x629))+((cj1*x619))+(((0.182)*sj1))+((px*x626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x631=((1.0)*cj1);
IkReal x632=(px*sj2);
IkReal x633=(py*sj2);
IkReal x634=((4.31999861760066e-5)*cj3);
IkReal x635=((0.0539999827200083)*cj3);
IkReal x636=((4.31999861760066e-5)*cj2*sj3);
IkReal x637=((0.0539999827200083)*cj2*sj3);
IkReal x638=(px*pz*sj1);
IkReal x639=(py*pz*sj1);
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal((((py*x637))+(((0.124999960000019)*x633))+(((0.000799999744000123)*x638))+(((0.999999680000154)*x639))+((x632*x634))+(((9.99999680000154e-5)*x632))+((x633*x635))+((px*x636)))),IkReal(((((-1.0)*x633*x634))+(((-0.000799999744000123)*x639))+(((0.124999960000019)*x632))+(((-9.99999680000154e-5)*x633))+(((0.999999680000154)*x638))+((x632*x635))+((px*x637))+(((-1.0)*py*x636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(IKsign(((((-1.0)*x631*(py*py)))+(((-1.0)*x631*(px*px))))),-1);
if(!x641.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x640.value)+(((1.5707963267949)*(x641.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x642=IKcos(j0);
IkReal x643=IKsin(j0);
IkReal x644=((0.054)*sj3);
IkReal x645=((0.000799999744000123)*sj1);
IkReal x646=((0.125)*sj2);
IkReal x647=((0.125)*cj2);
IkReal x648=((0.000799999744000123)*cj1);
IkReal x649=((0.363999883520056)*sj1);
IkReal x650=(cj1*pz);
IkReal x651=((0.000291199906816045)*sj1);
IkReal x652=((0.054)*cj3);
IkReal x653=((0.999999680000154)*x642);
IkReal x654=(px*x643);
IkReal x655=(px*x642);
IkReal x656=(py*x643);
IkReal x657=(py*x642);
evalcond[0]=(((py*x653))+(((-0.999999680000154)*x654))+(((0.000799999744000123)*x656))+(((0.000799999744000123)*x655)));
evalcond[1]=((((0.999999680000154)*cj1*x656))+((x648*x654))+((sj2*x652))+((cj2*x644))+x646+((pz*sj1))+(((-1.0)*x648*x657))+((cj1*px*x653)));
evalcond[2]=((0.182)+(((-1.0)*x650))+(((0.999999680000154)*sj1*x656))+((x645*x654))+(((-1.0)*sj2*x644))+((cj2*x652))+((px*sj1*x653))+x647+(((-1.0)*x645*x657)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-1.0)*x651*x654))+(((0.364)*x650))+((x651*x657))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*x649*x656))+(((-1.0)*x649*x655))+(((-1.0)*(py*py))));
evalcond[4]=((((-0.000799999744000123)*x657))+((cj2*sj1*x652))+((sj1*x647))+((cj1*sj2*x652))+(((-1.0)*sj1*sj2*x644))+((cj1*x646))+((cj1*cj2*x644))+((px*x653))+(((0.182)*sj1))+(((0.000799999744000123)*x654))+(((0.999999680000154)*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(((((0.000799999744000123)*px))+(((0.999999680000154)*py)))),IkReal(((((-0.999999680000154)*px))+(((0.000799999744000123)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
IkReal x658=x659.value;
j0array[0]=((-1.0)*x658);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x658)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x660=((0.0539999827200083)*px);
IkReal x661=((1250.0)*cj3);
IkReal x662=(cj2*pz);
IkReal x663=(cj0*sj2);
IkReal x664=((4.31999861760066e-5)*cj3);
IkReal x665=(py*sj0*sj2);
IkReal x666=(cj0*cj2*sj3);
IkReal x667=(pz*sj2*sj3);
IkReal x668=(px*sj0*sj2);
IkReal x669=(cj2*px*sj0*sj3);
IkReal x670=(cj2*py*sj0*sj3);
j1eval[0]=((((2.31481481481481)*py*x663))+(((1250.00039999994)*x667))+(((-1250.0)*x670))+(((-2.31481481481481)*x668))+((cj3*py*x663))+(((-1.0)*x661*x665))+(((-1.0)*px*x661*x663))+(((-2893.51851851852)*px*x663))+(((-1.0)*x669))+((py*x666))+(((-2893.5194444443)*x662))+(((-1.0)*cj3*x668))+(((-1250.00039999994)*cj3*x662))+(((-2893.51851851852)*x665))+(((-4212.9643111109)*pz))+(((-1250.0)*px*x666)));
j1eval[1]=IKsign(((((-0.054)*cj3*x662))+((py*x663*x664))+(((9.99999680000154e-5)*py*x663))+(((-0.124999960000019)*x665))+(((0.054)*x667))+(((-0.0539999827200083)*x670))+(((-1.0)*x660*x666))+(((-4.31999861760066e-5)*x669))+(((-0.125)*x662))+(((-0.0539999827200083)*cj3*x665))+(((-0.124999960000019)*px*x663))+(((-0.182)*pz))+(((-1.0)*cj3*x660*x663))+(((-1.0)*x664*x668))+(((4.31999861760066e-5)*py*x666))+(((-9.99999680000154e-5)*x668))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x671=(cj2*py);
IkReal x672=((0.0539999827200083)*cj0);
IkReal x673=((0.0539999827200083)*sj0);
IkReal x674=(cj0*py);
IkReal x675=(pz*sj2);
IkReal x676=(cj0*cj3);
IkReal x677=(px*sj0);
IkReal x678=(cj0*px);
IkReal x679=(cj2*px);
IkReal x680=((1250.0)*sj0);
IkReal x681=(py*sj0);
IkReal x682=(px*sj2*sj3);
IkReal x683=(py*sj2*sj3);
IkReal x684=(cj3*x675);
IkReal x685=(cj2*x677);
IkReal x686=(cj2*x678);
IkReal x687=(cj2*pz*sj3);
j1eval[0]=((((-1250.00039999994)*x684))+(((-1250.00039999994)*x687))+(((4212.96296296296)*x678))+(((-1.0)*x680*x683))+(((1250.0)*x676*x679))+((cj3*x671*x680))+(((-3.37037037037037)*x674))+(((2.31481481481481)*x685))+(((3.37037037037037)*x677))+(((-1.0)*sj2*sj3*x677))+((sj2*sj3*x674))+(((-2.31481481481481)*cj0*x671))+(((-1.0)*x671*x676))+(((-1250.0)*sj2*sj3*x678))+(((2893.51851851852)*x686))+(((2893.51851851852)*sj0*x671))+(((-2893.5194444443)*x675))+((cj3*x685))+(((4212.96296296296)*x681)));
j1eval[1]=IKsign(((((-0.125)*x675))+(((4.31999861760066e-5)*sj2*sj3*x674))+(((-4.31999861760066e-5)*x671*x676))+(((-9.99999680000154e-5)*cj0*x671))+(((0.181999941760028)*x681))+(((-0.054)*x687))+(((-0.054)*x684))+(((0.181999941760028)*x678))+(((0.124999960000019)*sj0*x671))+(((0.124999960000019)*x686))+(((0.000145599953408022)*x677))+((cj3*x671*x673))+(((-1.0)*x673*x683))+(((9.99999680000154e-5)*x685))+(((-0.000145599953408022)*x674))+(((4.31999861760066e-5)*cj3*x685))+((cj3*x672*x679))+(((-1.0)*x672*x682))+(((-4.31999861760066e-5)*sj2*sj3*x677))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x688=(cj2*cj3);
IkReal x689=(sj2*sj3);
j1eval[0]=((-3.82703703703704)+(((1.456)*x689))+(((-3.37037037037037)*cj2))+(((-1.456)*x688))+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-0.051665)+(((0.019656)*x689))+(((-0.0135)*cj3))+(((-0.0455)*cj2))+(((-0.019656)*x688))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x690=(cj2*pz);
IkReal x691=((0.054)*sj3);
IkReal x692=((0.0539999827200083)*sj3);
IkReal x693=(cj2*sj0);
IkReal x694=(cj3*sj2);
IkReal x695=(cj0*py);
IkReal x696=((0.0539999827200083)*cj3);
IkReal x697=((9.99999680000154e-5)*sj2);
IkReal x698=((4.31999861760066e-5)*px);
IkReal x699=(sj2*sj3);
IkReal x700=(cj2*cj3);
IkReal x701=(cj0*px);
IkReal x702=(px*sj0);
IkReal x703=(pz*sj2);
IkReal x704=(py*sj0*sj2);
IkReal x705=(sj2*x701);
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x698*x699))+(((0.000145599953408022)*x702))+(((-0.000145599953408022)*x695))+((x690*x691))+(((0.124999960000019)*py*x693))+(((0.181999941760028)*py*sj0))+(((-9.99999680000154e-5)*cj2*x695))+(((-4.31999861760066e-5)*x695*x700))+(((0.124999960000019)*cj2*x701))+((cj2*x696*x701))+((cj3*x693*x698))+(((-1.0)*x692*x704))+(((-1.0)*x692*x705))+((py*x693*x696))+(((4.31999861760066e-5)*x695*x699))+(((9.99999680000154e-5)*px*x693))+(((0.054)*pz*x694))+(((0.125)*x703))+(((0.181999941760028)*x701)))),IkReal(((((-0.054)*cj3*x690))+(((0.0539999827200083)*py*sj0*x694))+((x691*x703))+(((0.0539999827200083)*x694*x701))+((sj0*x694*x698))+((py*x692*x693))+((x697*x702))+((cj2*x692*x701))+(((-0.182)*pz))+(((-0.125)*x690))+(((-1.0)*x695*x697))+(((-4.31999861760066e-5)*x694*x695))+((sj3*x693*x698))+(((0.124999960000019)*x704))+(((0.124999960000019)*x705))+(((-4.31999861760066e-5)*cj2*sj3*x695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707=IKPowWithIntegerCheck(IKsign(((-0.051665)+(((-0.019656)*x700))+(((-0.0135)*cj3))+(((-0.0455)*cj2))+(((0.019656)*x699)))),-1);
if(!x707.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x706.value)+(((1.5707963267949)*(x707.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x708=IKcos(j1);
IkReal x709=IKsin(j1);
IkReal x710=((0.054)*sj3);
IkReal x711=((0.125)*cj2);
IkReal x712=((0.054)*cj3);
IkReal x713=(px*sj0);
IkReal x714=((0.000799999744000123)*cj0);
IkReal x715=((0.999999680000154)*sj0);
IkReal x716=(cj0*px);
IkReal x717=(py*x709);
IkReal x718=(sj2*x709);
IkReal x719=(pz*x708);
IkReal x720=(cj2*x708);
IkReal x721=(sj2*x708);
IkReal x722=(cj2*x709);
IkReal x723=(py*x708);
evalcond[0]=(((x712*x720))+(((-1.0)*x710*x722))+(((-1.0)*x710*x721))+(((-1.0)*pz))+(((-1.0)*x712*x718))+(((0.182)*x708))+((x708*x711))+(((-0.125)*x718)));
evalcond[1]=((((0.125)*sj2))+((sj2*x712))+(((0.999999680000154)*x708*x716))+(((0.000799999744000123)*x708*x713))+((cj2*x710))+(((-1.0)*x714*x723))+((pz*x709))+((x715*x723)));
evalcond[2]=((0.182)+(((-1.0)*x714*x717))+((x715*x717))+(((0.000799999744000123)*x709*x713))+(((-1.0)*x719))+x711+((cj2*x712))+(((0.999999680000154)*x709*x716))+(((-1.0)*sj2*x710)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.000291199906816045)*x709*x713))+(((0.000291199906816045)*cj0*x717))+(((0.364)*x719))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-0.363999883520056)*sj0*x717))+(((-0.363999883520056)*x709*x716))+(((-1.0)*(py*py))));
evalcond[4]=(((x712*x721))+((x712*x722))+(((0.000799999744000123)*x713))+(((-1.0)*x710*x718))+((x710*x720))+((x709*x711))+(((0.125)*x721))+(((0.999999680000154)*x716))+(((0.182)*x709))+((py*x715))+(((-1.0)*py*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x724=cj3*cj3;
IkReal x725=cj2*cj2;
IkReal x726=(cj2*sj3);
IkReal x727=((0.054)*pz);
IkReal x728=(cj3*sj2);
IkReal x729=(cj0*px);
IkReal x730=(cj0*py);
IkReal x731=((0.000799999744000123)*pz);
IkReal x732=(py*sj0);
IkReal x733=((0.124999960000019)*cj2);
IkReal x734=(px*sj0);
IkReal x735=(sj2*sj3);
IkReal x736=((0.999999680000154)*pz);
IkReal x737=(cj2*sj2);
IkReal x738=(cj2*cj3);
IkReal x739=((9.99999680000154e-5)*cj2);
IkReal x740=(sj3*x725);
IkReal x741=((0.0539999827200083)*x735);
IkReal x742=((4.31999861760066e-5)*x738);
IkReal x743=((0.005832)*x724);
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(((-0.03604)+(((0.019656)*x735))+(((-0.012709)*x725))+(((0.002916)*x724))+(((-0.019656)*x738))+(((0.0135)*sj2*x726))+(((-0.0135)*cj3*x725))+(((0.005832)*x726*x728))+(((-0.0455)*cj2))+(pz*pz)+(((-1.0)*x725*x743)))),IkReal(((((-0.02275)*sj2))+((x731*x734))+(((0.002916)*cj3*sj3))+(((0.00675)*sj3))+(((-1.0)*x737*x743))+(((-0.009828)*x726))+(((-0.009828)*x728))+(((-0.005832)*cj3*x740))+((x729*x736))+(((-0.0135)*x740))+(((-1.0)*x730*x731))+(((-0.0135)*cj2*x728))+((x732*x736))+(((-0.012709)*x737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(IKsign(((((0.181999941760028)*x732))+(((0.000145599953408022)*x734))+((x734*x742))+(((-1.0)*x727*x728))+(((0.181999941760028)*x729))+(((-4.31999861760066e-5)*x734*x735))+(((0.0539999827200083)*x732*x738))+(((-1.0)*x729*x741))+((x734*x739))+(((-1.0)*x730*x742))+((x729*x733))+(((-0.125)*pz*sj2))+(((-1.0)*x732*x741))+(((-1.0)*x730*x739))+(((-1.0)*x726*x727))+(((4.31999861760066e-5)*x730*x735))+(((-0.000145599953408022)*x730))+(((0.0539999827200083)*x729*x738))+((x732*x733)))),-1);
if(!x745.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x744.value)+(((1.5707963267949)*(x745.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x746=IKcos(j1);
IkReal x747=IKsin(j1);
IkReal x748=((0.054)*sj3);
IkReal x749=((0.125)*cj2);
IkReal x750=((0.054)*cj3);
IkReal x751=(px*sj0);
IkReal x752=((0.000799999744000123)*cj0);
IkReal x753=((0.999999680000154)*sj0);
IkReal x754=(cj0*px);
IkReal x755=(py*x747);
IkReal x756=(sj2*x747);
IkReal x757=(pz*x746);
IkReal x758=(cj2*x746);
IkReal x759=(sj2*x746);
IkReal x760=(cj2*x747);
IkReal x761=(py*x746);
evalcond[0]=((((0.182)*x746))+(((-1.0)*x750*x756))+((x746*x749))+(((-1.0)*pz))+(((-0.125)*x756))+((x750*x758))+(((-1.0)*x748*x759))+(((-1.0)*x748*x760)));
evalcond[1]=((((-1.0)*x752*x761))+((cj2*x748))+(((0.125)*sj2))+(((0.999999680000154)*x746*x754))+(((0.000799999744000123)*x746*x751))+((sj2*x750))+((x753*x761))+((pz*x747)));
evalcond[2]=((0.182)+(((0.999999680000154)*x747*x754))+((cj2*x750))+(((-1.0)*x757))+(((0.000799999744000123)*x747*x751))+(((-1.0)*x752*x755))+x749+((x753*x755))+(((-1.0)*sj2*x748)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.363999883520056)*sj0*x755))+(((-0.363999883520056)*x747*x754))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.000291199906816045)*cj0*x755))+(((0.364)*x757))+(((-1.0)*(py*py)))+(((-0.000291199906816045)*x747*x751)));
evalcond[4]=((((0.182)*x747))+(((0.999999680000154)*x754))+((py*x753))+((x747*x749))+(((0.125)*x759))+(((-1.0)*py*x752))+((x750*x760))+((x750*x759))+(((-1.0)*x748*x756))+(((0.000799999744000123)*x751))+((x748*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x762=cj2*cj2;
IkReal x763=cj3*cj3;
IkReal x764=(cj2*pz);
IkReal x765=(cj2*sj3);
IkReal x766=(cj3*sj2);
IkReal x767=(py*sj2);
IkReal x768=((0.000799999744000123)*pz);
IkReal x769=(cj0*py);
IkReal x770=(px*sj0);
IkReal x771=(py*sj0);
IkReal x772=((0.999999680000154)*pz);
IkReal x773=(cj0*px);
IkReal x774=(cj2*sj2);
IkReal x775=((0.0135)*cj3);
IkReal x776=(sj3*x762);
IkReal x777=((0.0539999827200083)*x773);
IkReal x778=((0.005832)*x763);
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal((((x774*x778))+(((-0.00675)*sj3))+(((0.0135)*cj2*x766))+(((0.02275)*sj2))+(((0.012709)*x774))+((x771*x772))+((x772*x773))+(((0.009828)*x766))+(((0.009828)*x765))+(((-0.002916)*cj3*sj3))+(((0.0135)*x776))+(((0.005832)*cj3*x776))+(((-1.0)*x768*x769))+((x768*x770)))),IkReal(((0.015625)+(((0.0135)*sj2*x765))+(((-0.012709)*x762))+(((0.002916)*x763))+(((-1.0)*(pz*pz)))+(((0.005832)*x765*x766))+x775+(((-1.0)*x762*x778))+(((-1.0)*x762*x775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780=IKPowWithIntegerCheck(IKsign(((((-0.0539999827200083)*x766*x771))+(((9.99999680000154e-5)*cj0*x767))+(((-9.99999680000154e-5)*sj2*x770))+(((-0.0539999827200083)*x765*x771))+(((4.31999861760066e-5)*x765*x769))+(((-0.125)*x764))+(((-4.31999861760066e-5)*x765*x770))+(((-4.31999861760066e-5)*x766*x770))+(((-1.0)*x766*x777))+(((-0.124999960000019)*sj0*x767))+(((-0.182)*pz))+(((-1.0)*x765*x777))+(((-0.124999960000019)*sj2*x773))+(((4.31999861760066e-5)*x766*x769))+(((-0.054)*cj3*x764))+(((0.054)*pz*sj2*sj3)))),-1);
if(!x780.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x779.value)+(((1.5707963267949)*(x780.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x781=IKcos(j1);
IkReal x782=IKsin(j1);
IkReal x783=((0.054)*sj3);
IkReal x784=((0.125)*cj2);
IkReal x785=((0.054)*cj3);
IkReal x786=(px*sj0);
IkReal x787=((0.000799999744000123)*cj0);
IkReal x788=((0.999999680000154)*sj0);
IkReal x789=(cj0*px);
IkReal x790=(py*x782);
IkReal x791=(sj2*x782);
IkReal x792=(pz*x781);
IkReal x793=(cj2*x781);
IkReal x794=(sj2*x781);
IkReal x795=(cj2*x782);
IkReal x796=(py*x781);
evalcond[0]=(((x781*x784))+(((-1.0)*x783*x794))+(((-1.0)*x783*x795))+((x785*x793))+(((-0.125)*x791))+(((-1.0)*pz))+(((0.182)*x781))+(((-1.0)*x785*x791)));
evalcond[1]=(((sj2*x785))+(((0.000799999744000123)*x781*x786))+((x788*x796))+(((0.125)*sj2))+((pz*x782))+(((-1.0)*x787*x796))+(((0.999999680000154)*x781*x789))+((cj2*x783)));
evalcond[2]=((0.182)+(((0.999999680000154)*x782*x789))+((x788*x790))+(((-1.0)*x787*x790))+(((0.000799999744000123)*x782*x786))+x784+(((-1.0)*x792))+(((-1.0)*sj2*x783))+((cj2*x785)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((0.364)*x792))+(((0.000291199906816045)*cj0*x790))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))+(((-0.363999883520056)*x782*x789))+(((-0.000291199906816045)*x782*x786))+(((-0.363999883520056)*sj0*x790)));
evalcond[4]=((((-1.0)*x783*x791))+(((0.125)*x794))+((x785*x794))+((x785*x795))+(((0.000799999744000123)*x786))+((x782*x784))+((x783*x793))+(((0.182)*x782))+((py*x788))+(((-1.0)*py*x787))+(((0.999999680000154)*x789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(((((0.000799999744000123)*px))+(((0.999999680000154)*py)))),IkReal(((((-0.999999680000154)*px))+(((0.000799999744000123)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
IkReal x797=x798.value;
j0array[0]=((-1.0)*x797);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x797)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2eval[2];
j2eval[0]=((((50.8750508750509)*(IKabs(((0.0455)+(((0.019656)*cj3)))))))+(IKabs(sj3)));
j2eval[1]=((5.35836762688615)+(sj3*sj3)+(cj3*cj3)+(((4.62962962962963)*cj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x799=px*px;
IkReal x800=sj0*sj0;
IkReal x801=cj0*cj0;
IkReal x802=py*py;
IkReal x803=(cj0*sj0);
IkReal x804=(px*py);
j1eval[0]=((IKabs(pz))+(((6.39999590400262e-7)*(IKabs(((((-1562500.49999992)*py*sj0))+(((1250.00039999994)*cj0*py))+(((-1562500.49999992)*cj0*px))+(((-1250.00039999994)*px*sj0))))))));
j1eval[1]=((((1562501.0)*(pz*pz)))+(((2500.0)*x799*x803))+(((-2500.0)*x801*x804))+((x799*x800))+(((2500.0)*x800*x804))+((x801*x802))+(((1562500.0)*x800*x802))+(((1562500.0)*x799*x801))+(((-2500.0)*x802*x803))+(((3124998.0)*x803*x804)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x805=pz*pz;
IkReal x806=((((-0.363999883520056)*cj0*px))+(((-0.000291199906816045)*px*sj0))+(((0.000291199906816045)*cj0*py))+(((-0.363999883520056)*py*sj0)));
CheckValue<IkReal> x809 = IKatan2WithCheck(IkReal(((0.364)*pz)),IkReal(x806),IKFAST_ATAN2_MAGTHRESH);
if(!x809.valid){
continue;
}
IkReal x807=((1.0)*(x809.value));
if((((x806*x806)+(((0.132496)*x805)))) < -0.00001)
continue;
CheckValue<IkReal> x810=IKPowWithIntegerCheck(IKabs(IKsqrt(((x806*x806)+(((0.132496)*x805))))),-1);
if(!x810.valid){
continue;
}
if( (((x810.value)*(((-0.014583)+(((-1.0)*x805))+(((-1.0)*(px*px)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((x810.value)*(((-0.014583)+(((-1.0)*x805))+(((-1.0)*(px*px)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x808=IKasin(((x810.value)*(((-0.014583)+(((-1.0)*x805))+(((-1.0)*(px*px)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))))));
j1array[0]=((((-1.0)*x808))+(((-1.0)*x807)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x808+(((-1.0)*x807)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[2];
IkReal x811=(cj3*sj1);
j2eval[0]=((((-1.37340740740741)*sj1))+(((-1.0)*x811)));
j2eval[1]=IKsign(((((-614.25)*x811))+(((-843.6155)*sj1))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((421807.75)+(((307125.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x812=(cj1*cj3);
j2eval[0]=((((1.37340740740741)*cj1))+x812);
j2eval[1]=IKsign(((((9.2705)*cj1))+(((6.75)*x812))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((-1.37340740740741)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-421807.75)+(((-307125.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x813=px*px;
IkReal x814=py*py;
IkReal x815=pz*pz;
IkReal x816=((1228500.0)*pz);
IkReal x817=((3375000.0)*x813);
IkReal x818=((3375000.0)*x814);
IkReal x819=((3375000.0)*x815);
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal((((cj3*x816))+(((-174369.375)*sj3))+(((-45562.5)*cj3*sj3))+((sj3*x819))+((sj3*x818))+((sj3*x817))+(((2843750.0)*pz)))),IkReal(((403632.8125)+(((-1.0)*cj3*x818))+(((-1.0)*cj3*x819))+(((-1.0)*cj3*x817))+((sj3*x816))+(((-7812500.0)*x813))+(((-7812500.0)*x814))+(((-7812500.0)*x815))+(((45562.5)*(cj3*cj3)))+(((279838.125)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821=IKPowWithIntegerCheck(IKsign(((-421807.75)+(((-307125.0)*cj3)))),-1);
if(!x821.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x820.value)+(((1.5707963267949)*(x821.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x822=IKsin(j2);
IkReal x823=IKcos(j2);
IkReal x824=((0.054)*cj3);
IkReal x825=((0.054)*sj3);
evalcond[0]=((((-1.0)*x822*x824))+(((-0.125)*x822))+(((-1.0)*x823*x825))+(((-1.0)*pz)));
evalcond[1]=((0.051665)+(((-1.0)*(px*px)))+(((0.019656)*cj3*x823))+(((0.0455)*x823))+(((-0.019656)*sj3*x822))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=((0.182)+(((-1.0)*x822*x825))+(((0.125)*x823))+(((0.000799999744000123)*px*sj0))+((x823*x824))+(((-0.000799999744000123)*cj0*py))+(((0.999999680000154)*py*sj0))+(((0.999999680000154)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((421807.75)+(((307125.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x826=px*px;
IkReal x827=py*py;
IkReal x828=pz*pz;
IkReal x829=((1228500.0)*pz);
IkReal x830=((3375000.0)*sj3);
IkReal x831=((3375000.0)*cj3);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(((((45562.5)*cj3*sj3))+(((-1.0)*x828*x830))+(((-1.0)*x827*x830))+(((174369.375)*sj3))+(((-1.0)*x826*x830))+((cj3*x829))+(((2843750.0)*pz)))),IkReal(((-403632.8125)+((sj3*x829))+((x827*x831))+(((7812500.0)*x828))+(((7812500.0)*x827))+(((7812500.0)*x826))+((x826*x831))+(((-279838.125)*cj3))+(((-45562.5)*(cj3*cj3)))+((x828*x831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign(((421807.75)+(((307125.0)*cj3)))),-1);
if(!x833.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x832.value)+(((1.5707963267949)*(x833.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x834=IKsin(j2);
IkReal x835=IKcos(j2);
IkReal x836=((0.054)*cj3);
IkReal x837=((0.054)*sj3);
evalcond[0]=((((0.125)*x834))+((x835*x837))+(((-1.0)*pz))+((x834*x836)));
evalcond[1]=((0.051665)+(((-1.0)*(px*px)))+(((-0.019656)*sj3*x834))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.0455)*x835))+(((-1.0)*(py*py)))+(((0.019656)*cj3*x835)));
evalcond[2]=((0.182)+(((-0.999999680000154)*cj0*px))+(((0.125)*x835))+((x835*x836))+(((-0.000799999744000123)*px*sj0))+(((-0.999999680000154)*py*sj0))+(((-1.0)*x834*x837))+(((0.000799999744000123)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=((1.37340740740741)+cj3);
j2eval[1]=IKsign(((4635.25)+(((3375.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x838=((13499.9956800021)*cj3);
IkReal x839=(py*sj0);
IkReal x840=(cj0*px);
IkReal x841=((13499.9956800021)*sj3);
IkReal x842=((13500.0)*pz);
IkReal x843=(px*sj0);
IkReal x844=((10.7999965440017)*cj0*py);
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x842))+(((2457.0)*sj3))+(((-10.7999965440017)*cj3*x843))+(((-31249.9900000048)*x840))+(((24.9999920000038)*cj0*py))+(((-31249.9900000048)*x839))+(((-1.0)*x838*x839))+(((-1.0)*x838*x840))+((cj3*x844))+(((-24.9999920000038)*x843)))),IkReal(((-5687.5)+(((-1.0)*x840*x841))+(((-2457.0)*cj3))+(((-10.7999965440017)*sj3*x843))+(((31250.0)*pz))+(((-1.0)*x839*x841))+((cj3*x842))+((sj3*x844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
CheckValue<IkReal> x846=IKPowWithIntegerCheck(IKsign(((4635.25)+(((3375.0)*cj3)))),-1);
if(!x846.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x845.value)+(((1.5707963267949)*(x846.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x847=IKcos(j2);
IkReal x848=IKsin(j2);
IkReal x849=((0.054)*x847);
IkReal x850=((0.054)*x848);
evalcond[0]=((0.182)+(((0.125)*x847))+(((-1.0)*pz))+(((-1.0)*sj3*x850))+((cj3*x849)));
evalcond[1]=((0.051665)+(((-1.0)*(px*px)))+(((-0.019656)*sj3*x848))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.0455)*x847))+(((-1.0)*(py*py)))+(((0.019656)*cj3*x847)));
evalcond[2]=((((0.125)*x848))+((cj3*x850))+(((0.000799999744000123)*px*sj0))+((sj3*x849))+(((-0.000799999744000123)*cj0*py))+(((0.999999680000154)*py*sj0))+(((0.999999680000154)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=((-1.37340740740741)+(((-1.0)*cj3)));
j2eval[1]=IKsign(((-4635.25)+(((-3375.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x851=((13499.9956800021)*cj3);
IkReal x852=(py*sj0);
IkReal x853=(cj0*px);
IkReal x854=((13499.9956800021)*sj3);
IkReal x855=((13500.0)*pz);
IkReal x856=(px*sj0);
IkReal x857=((10.7999965440017)*cj0*py);
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(((((-31249.9900000048)*x853))+(((-31249.9900000048)*x852))+((cj3*x857))+(((-24.9999920000038)*x856))+(((24.9999920000038)*cj0*py))+(((-1.0)*sj3*x855))+(((-2457.0)*sj3))+(((-10.7999965440017)*cj3*x856))+(((-1.0)*x851*x853))+(((-1.0)*x851*x852)))),IkReal(((5687.5)+(((-10.7999965440017)*sj3*x856))+(((-1.0)*x853*x854))+(((2457.0)*cj3))+(((-1.0)*x852*x854))+((sj3*x857))+((cj3*x855))+(((31250.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
CheckValue<IkReal> x859=IKPowWithIntegerCheck(IKsign(((-4635.25)+(((-3375.0)*cj3)))),-1);
if(!x859.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x858.value)+(((1.5707963267949)*(x859.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x860=IKcos(j2);
IkReal x861=IKsin(j2);
IkReal x862=((0.054)*sj3);
IkReal x863=((0.054)*cj3);
evalcond[0]=((-0.182)+(((-1.0)*x860*x863))+(((-0.125)*x860))+(((-1.0)*pz))+((x861*x862)));
evalcond[1]=((0.051665)+(((-1.0)*(px*px)))+(((-0.019656)*sj3*x861))+(((0.0455)*x860))+(((0.019656)*cj3*x860))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=((((-0.999999680000154)*cj0*px))+(((-0.000799999744000123)*px*sj0))+(((-0.999999680000154)*py*sj0))+(((0.125)*x861))+((x861*x863))+((x860*x862))+(((0.000799999744000123)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x864=cj1*cj1;
IkReal x865=((62.5)*pz);
IkReal x866=(py*sj0);
IkReal x867=((62.4999800000096)*cj0);
IkReal x868=(cj1*sj1);
IkReal x869=((0.0215999930880033)*sj3);
IkReal x870=((0.0499999840000077)*sj0);
IkReal x871=(cj0*py);
IkReal x872=((26.9999913600041)*sj3);
IkReal x873=((27.0)*pz);
IkReal x874=((4.914)*cj1);
IkReal x875=(cj0*px);
IkReal x876=((26.9999913600041)*cj3);
IkReal x877=((26.9999913600041)*x864);
IkReal x878=(px*x864);
IkReal x879=((0.0215999930880033)*cj3*sj0);
IkReal x880=(cj3*x864);
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(((((-1.0)*x865*x868))+((sj3*x874))+(((-1.0)*x868*x869*x871))+(((0.0215999930880033)*x871*x880))+(((-1.0)*sj3*x864*x873))+(((0.0499999840000077)*x864*x871))+(((-62.4999800000096)*x864*x866))+(((-1.0)*cj3*x868*x873))+((px*sj0*x868*x869))+((x868*x872*x875))+(((-1.0)*x870*x878))+(((-1.0)*x878*x879))+(((-1.0)*x867*x878))+(((-1.0)*x864*x866*x876))+((x866*x868*x872))+(((-1.0)*x864*x875*x876)))),IkReal(((((-1.0)*x866*x868*x876))+(((-1.0)*sj3*x868*x873))+(((0.0215999930880033)*cj3*x868*x871))+(((-1.0)*px*x867*x868))+((x864*x869*x871))+(((-1.0)*sj0*x869*x878))+(((-11.375)*cj1))+(((-1.0)*px*x868*x870))+(((-1.0)*px*x868*x879))+(((-1.0)*cj3*x874))+(((-1.0)*x868*x875*x876))+(((0.0499999840000077)*x868*x871))+(((-62.4999800000096)*x866*x868))+(((-1.0)*x864*x866*x872))+((x864*x865))+((x873*x880))+(((-1.0)*x864*x872*x875)))),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
CheckValue<IkReal> x882=IKPowWithIntegerCheck(IKsign(((((9.2705)*cj1))+(((6.75)*cj1*cj3)))),-1);
if(!x882.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x881.value)+(((1.5707963267949)*(x882.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x883=IKcos(j2);
IkReal x884=IKsin(j2);
IkReal x885=((0.054)*cj3);
IkReal x886=((1.0)*pz);
IkReal x887=((0.054)*sj3);
IkReal x888=((0.000799999744000123)*cj0*py);
IkReal x889=((0.125)*x883);
IkReal x890=(cj1*x884);
IkReal x891=(sj3*x884);
IkReal x892=((0.999999680000154)*py*sj0);
IkReal x893=(cj1*x883);
IkReal x894=((0.125)*x884);
IkReal x895=(sj1*x883);
IkReal x896=((0.000799999744000123)*px*sj0);
IkReal x897=((0.999999680000154)*cj0*px);
evalcond[0]=((0.051665)+(((0.019656)*cj3*x883))+(((-1.0)*(px*px)))+(((-1.0)*pz*x886))+(((0.0455)*x883))+(((0.0135)*cj3))+(((-0.019656)*x891))+(((-1.0)*(py*py))));
evalcond[1]=((((-1.0)*sj1*x884*x885))+(((-1.0)*x886))+(((0.182)*cj1))+((cj1*x889))+((x885*x893))+(((-1.0)*sj1*x894))+(((-1.0)*x887*x890))+(((-1.0)*x887*x895)));
evalcond[2]=(((x883*x887))+((pz*sj1))+((cj1*x897))+((cj1*x896))+((cj1*x892))+(((-1.0)*cj1*x888))+x894+((x884*x885)));
evalcond[3]=((0.182)+((sj1*x892))+((sj1*x897))+((sj1*x896))+((x883*x885))+(((-1.0)*cj1*x886))+x889+(((-1.0)*sj1*x888))+(((-1.0)*x884*x887)));
evalcond[4]=(((sj1*x889))+(((-1.0)*sj1*x884*x887))+(((-1.0)*x888))+(((0.125)*x890))+(((0.182)*sj1))+x896+x897+x892+((x885*x895))+((x885*x890))+((x887*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x898=px*px;
IkReal x899=py*py;
IkReal x900=pz*pz;
IkReal x901=((982.799685504151)*cj1);
IkReal x902=(px*sj3);
IkReal x903=(cj0*py);
IkReal x904=((2274.99927200035)*cj1);
IkReal x905=(cj3*px);
IkReal x906=((3375000.0)*sj3);
IkReal x907=((3375000.0)*cj3);
IkReal x908=(pz*sj1);
IkReal x909=((1228499.60688019)*cj0*cj1);
IkReal x910=(cj1*py*sj0);
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(((((-1.0)*x900*x906))+(((-2843749.09000044)*cj0*cj1*px))+(((45562.5)*cj3*sj3))+((x903*x904))+(((174369.375)*sj3))+(((-1228499.60688019)*cj3*x910))+(((-1.0)*sj0*x901*x905))+(((-1.0)*px*sj0*x904))+((cj3*x901*x903))+(((-1.0)*x898*x906))+(((-2843750.0)*x908))+(((-1228500.0)*cj3*x908))+(((-1.0)*x899*x906))+(((-1.0)*x905*x909))+(((-2843749.09000044)*x910)))),IkReal(((-403632.8125)+(((-1228499.60688019)*sj3*x910))+(((7812500.0)*x899))+(((7812500.0)*x898))+(((7812500.0)*x900))+(((-1.0)*sj0*x901*x902))+(((-1.0)*x902*x909))+((sj3*x901*x903))+((x900*x907))+(((-279838.125)*cj3))+((x899*x907))+(((-45562.5)*(cj3*cj3)))+((x898*x907))+(((-1228500.0)*sj3*x908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
CheckValue<IkReal> x912=IKPowWithIntegerCheck(IKsign(((421807.75)+(((307125.0)*cj3)))),-1);
if(!x912.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x911.value)+(((1.5707963267949)*(x912.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x913=IKcos(j2);
IkReal x914=IKsin(j2);
IkReal x915=((0.054)*cj3);
IkReal x916=((1.0)*pz);
IkReal x917=((0.054)*sj3);
IkReal x918=((0.000799999744000123)*cj0*py);
IkReal x919=((0.125)*x913);
IkReal x920=(cj1*x914);
IkReal x921=(sj3*x914);
IkReal x922=((0.999999680000154)*py*sj0);
IkReal x923=(cj1*x913);
IkReal x924=((0.125)*x914);
IkReal x925=(sj1*x913);
IkReal x926=((0.000799999744000123)*px*sj0);
IkReal x927=((0.999999680000154)*cj0*px);
evalcond[0]=((0.051665)+(((-0.019656)*x921))+(((-1.0)*(px*px)))+(((0.0455)*x913))+(((0.019656)*cj3*x913))+(((-1.0)*pz*x916))+(((0.0135)*cj3))+(((-1.0)*(py*py))));
evalcond[1]=((((-1.0)*sj1*x924))+((x915*x923))+(((-1.0)*x916))+(((0.182)*cj1))+(((-1.0)*sj1*x914*x915))+(((-1.0)*x917*x920))+(((-1.0)*x917*x925))+((cj1*x919)));
evalcond[2]=(((x914*x915))+((pz*sj1))+((cj1*x926))+((cj1*x927))+((cj1*x922))+((x913*x917))+(((-1.0)*cj1*x918))+x924);
evalcond[3]=((0.182)+((sj1*x922))+((sj1*x927))+((sj1*x926))+(((-1.0)*sj1*x918))+(((-1.0)*x914*x917))+((x913*x915))+(((-1.0)*cj1*x916))+x919);
evalcond[4]=(((x915*x925))+((x915*x920))+(((-1.0)*x918))+(((0.125)*x920))+((x917*x923))+(((-1.0)*sj1*x914*x917))+(((0.182)*sj1))+x926+x927+x922+((sj1*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x928=pz*pz;
IkReal x929=py*py;
IkReal x930=px*px;
IkReal x931=cj3*cj3;
IkReal x932=((6750.0)*cj3);
IkReal x933=(cj3*sj1);
IkReal x934=(cj1*sj3);
IkReal x935=((6750.0)*sj3);
IkReal x936=((2457.0)*pz);
IkReal x937=(cj1*x929);
IkReal x938=((91.125)*x931);
IkReal x939=(sj1*x928);
IkReal x940=(cj1*x930);
IkReal x941=(sj1*x929);
IkReal x942=(cj1*x928);
IkReal x943=((6750.0)*sj1*x930);
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(((((-227.859375)*cj1))+(((-15625.0)*x937))+(((112.50225)*cj1*cj3))+((x935*x939))+(((-15625.0)*x942))+(((-15625.0)*x940))+((sj1*x930*x935))+(((-1.0)*x932*x942))+(((-1.0)*x932*x940))+((cj3*x936))+((x935*x941))+(((-348.73875)*sj1*sj3))+(((-1.0)*x932*x937))+(((-91.125)*sj3*x933))+((cj1*x938))+(((5687.5)*pz)))),IkReal(((((-15625.0)*x939))+(((-6750.0)*x930*x934))+(((91.125)*cj3*x934))+(((-6750.0)*x928*x934))+(((807.265625)*sj1))+(((559.67625)*x933))+((sj1*x938))+(((-15625.0)*x941))+(((-15625.0)*sj1*x930))+(((-1.0)*x932*x941))+(((-6750.0)*x929*x934))+(((-1.0)*x932*x939))+(((-1.0)*sj1*x930*x932))+((sj3*x936))+(((-98.43525)*x934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945=IKPowWithIntegerCheck(IKsign(((((-614.25)*x933))+(((-843.6155)*sj1)))),-1);
if(!x945.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x944.value)+(((1.5707963267949)*(x945.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x946=IKcos(j2);
IkReal x947=IKsin(j2);
IkReal x948=((0.054)*cj3);
IkReal x949=((1.0)*pz);
IkReal x950=((0.054)*sj3);
IkReal x951=((0.000799999744000123)*cj0*py);
IkReal x952=((0.125)*x946);
IkReal x953=(cj1*x947);
IkReal x954=(sj3*x947);
IkReal x955=((0.999999680000154)*py*sj0);
IkReal x956=(cj1*x946);
IkReal x957=((0.125)*x947);
IkReal x958=(sj1*x946);
IkReal x959=((0.000799999744000123)*px*sj0);
IkReal x960=((0.999999680000154)*cj0*px);
evalcond[0]=((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*pz*x949))+(((0.0455)*x946))+(((0.019656)*cj3*x946))+(((-0.019656)*x954))+(((0.0135)*cj3))+(((-1.0)*(py*py))));
evalcond[1]=((((-1.0)*x949))+((cj1*x952))+((x948*x956))+(((-1.0)*sj1*x947*x948))+(((-1.0)*sj1*x957))+(((0.182)*cj1))+(((-1.0)*x950*x953))+(((-1.0)*x950*x958)));
evalcond[2]=((((-1.0)*cj1*x951))+((x947*x948))+((cj1*x960))+((cj1*x955))+((cj1*x959))+((x946*x950))+((pz*sj1))+x957);
evalcond[3]=((0.182)+((x946*x948))+(((-1.0)*cj1*x949))+((sj1*x960))+(((-1.0)*x947*x950))+(((-1.0)*sj1*x951))+((sj1*x955))+((sj1*x959))+x952);
evalcond[4]=(((x948*x958))+((x948*x953))+((sj1*x952))+(((0.182)*sj1))+(((-1.0)*x951))+x960+x959+x955+((x950*x956))+(((-1.0)*sj1*x947*x950))+(((0.125)*x953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x961=((0.0455)+(((0.019656)*cj3)));
CheckValue<IkReal> x964 = IKatan2WithCheck(IkReal(x961),IkReal(((-0.019656)*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
IkReal x962=((1.0)*(x964.value));
if((((x961*x961)+(((0.000386358336)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(IKabs(IKsqrt(((x961*x961)+(((0.000386358336)*(sj3*sj3)))))),-1);
if(!x965.valid){
continue;
}
if( (((x965.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((x965.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x963=IKasin(((x965.value)*(((0.051665)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))))));
j2array[0]=((((-1.0)*x963))+(((-1.0)*x962)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+x963+(((-1.0)*x962)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x966=((0.0539999827200083)*px);
IkReal x967=((1250.0)*cj3);
IkReal x968=(cj2*pz);
IkReal x969=(cj0*sj2);
IkReal x970=((4.31999861760066e-5)*cj3);
IkReal x971=(py*sj0*sj2);
IkReal x972=(cj0*cj2*sj3);
IkReal x973=(pz*sj2*sj3);
IkReal x974=(px*sj0*sj2);
IkReal x975=(cj2*px*sj0*sj3);
IkReal x976=(cj2*py*sj0*sj3);
j1eval[0]=((((-1.0)*cj3*x974))+(((-2.31481481481481)*x974))+(((-1.0)*x975))+(((-2893.5194444443)*x968))+(((-2893.51851851852)*px*x969))+(((-1.0)*x967*x971))+(((-1250.0)*px*x972))+(((2.31481481481481)*py*x969))+(((-1250.00039999994)*cj3*x968))+((py*x972))+(((-1250.0)*x976))+((cj3*py*x969))+(((1250.00039999994)*x973))+(((-4212.9643111109)*pz))+(((-2893.51851851852)*x971))+(((-1.0)*px*x967*x969)));
j1eval[1]=IKsign(((((-9.99999680000154e-5)*x974))+(((-0.0539999827200083)*x976))+(((-0.125)*x968))+(((-4.31999861760066e-5)*x975))+(((4.31999861760066e-5)*py*x972))+(((-0.0539999827200083)*cj3*x971))+(((-0.054)*cj3*x968))+(((-1.0)*x966*x972))+(((0.054)*x973))+(((-0.124999960000019)*x971))+((py*x969*x970))+(((-1.0)*x970*x974))+(((-0.182)*pz))+(((-0.124999960000019)*px*x969))+(((9.99999680000154e-5)*py*x969))+(((-1.0)*cj3*x966*x969))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x977=(cj2*py);
IkReal x978=((0.0539999827200083)*cj0);
IkReal x979=((0.0539999827200083)*sj0);
IkReal x980=(cj0*py);
IkReal x981=(pz*sj2);
IkReal x982=(cj0*cj3);
IkReal x983=(px*sj0);
IkReal x984=(cj0*px);
IkReal x985=(cj2*px);
IkReal x986=((1250.0)*sj0);
IkReal x987=(py*sj0);
IkReal x988=(px*sj2*sj3);
IkReal x989=(py*sj2*sj3);
IkReal x990=(cj3*x981);
IkReal x991=(cj2*x983);
IkReal x992=(cj2*x984);
IkReal x993=(cj2*pz*sj3);
j1eval[0]=((((3.37037037037037)*x983))+(((-1.0)*x977*x982))+(((4212.96296296296)*x984))+(((4212.96296296296)*x987))+(((-2893.5194444443)*x981))+(((-1250.00039999994)*x993))+(((-1250.00039999994)*x990))+(((-1250.0)*sj2*sj3*x984))+(((2893.51851851852)*x992))+(((-1.0)*x986*x989))+(((1250.0)*x982*x985))+(((-3.37037037037037)*x980))+(((-1.0)*sj2*sj3*x983))+(((-2.31481481481481)*cj0*x977))+(((2.31481481481481)*x991))+(((2893.51851851852)*sj0*x977))+((cj3*x977*x986))+((cj3*x991))+((sj2*sj3*x980)));
j1eval[1]=IKsign(((((0.124999960000019)*sj0*x977))+(((-0.125)*x981))+(((4.31999861760066e-5)*sj2*sj3*x980))+(((0.124999960000019)*x992))+(((0.181999941760028)*x984))+(((0.181999941760028)*x987))+(((-9.99999680000154e-5)*cj0*x977))+(((9.99999680000154e-5)*x991))+(((4.31999861760066e-5)*cj3*x991))+(((-0.054)*x993))+(((-0.054)*x990))+(((-4.31999861760066e-5)*sj2*sj3*x983))+((cj3*x978*x985))+(((-1.0)*x978*x988))+(((0.000145599953408022)*x983))+(((-0.000145599953408022)*x980))+(((-4.31999861760066e-5)*x977*x982))+(((-1.0)*x979*x989))+((cj3*x977*x979))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x994=(cj2*cj3);
IkReal x995=(sj2*sj3);
j1eval[0]=((-3.82703703703704)+(((-3.37037037037037)*cj2))+(((1.456)*x995))+(((-1.456)*x994))+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-0.051665)+(((-0.0135)*cj3))+(((-0.019656)*x994))+(((-0.0455)*cj2))+(((0.019656)*x995))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x996=(cj2*pz);
IkReal x997=((0.054)*sj3);
IkReal x998=((0.0539999827200083)*sj3);
IkReal x999=(cj2*sj0);
IkReal x1000=(cj3*sj2);
IkReal x1001=(cj0*py);
IkReal x1002=((0.0539999827200083)*cj3);
IkReal x1003=((9.99999680000154e-5)*sj2);
IkReal x1004=((4.31999861760066e-5)*px);
IkReal x1005=(sj2*sj3);
IkReal x1006=(cj2*cj3);
IkReal x1007=(cj0*px);
IkReal x1008=(px*sj0);
IkReal x1009=(pz*sj2);
IkReal x1010=(py*sj0*sj2);
IkReal x1011=(sj2*x1007);
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(((((0.124999960000019)*cj2*x1007))+(((-4.31999861760066e-5)*x1001*x1006))+(((0.125)*x1009))+(((0.181999941760028)*py*sj0))+(((-9.99999680000154e-5)*cj2*x1001))+((cj3*x1004*x999))+(((4.31999861760066e-5)*x1001*x1005))+((cj2*x1002*x1007))+(((-1.0)*x1011*x998))+(((-1.0)*x1010*x998))+(((-1.0)*sj0*x1004*x1005))+((py*x1002*x999))+(((9.99999680000154e-5)*px*x999))+(((0.124999960000019)*py*x999))+((x996*x997))+(((0.181999941760028)*x1007))+(((0.054)*pz*x1000))+(((0.000145599953408022)*x1008))+(((-0.000145599953408022)*x1001)))),IkReal(((((-0.054)*cj3*x996))+(((0.0539999827200083)*py*sj0*x1000))+(((-4.31999861760066e-5)*x1000*x1001))+((py*x998*x999))+(((0.124999960000019)*x1010))+(((0.124999960000019)*x1011))+((x1009*x997))+(((0.0539999827200083)*x1000*x1007))+((sj3*x1004*x999))+(((-0.125)*x996))+(((-0.182)*pz))+((cj2*x1007*x998))+((sj0*x1000*x1004))+(((-1.0)*x1001*x1003))+(((-4.31999861760066e-5)*cj2*sj3*x1001))+((x1003*x1008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(IKsign(((-0.051665)+(((-0.0135)*cj3))+(((-0.019656)*x1006))+(((-0.0455)*cj2))+(((0.019656)*x1005)))),-1);
if(!x1013.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1012.value)+(((1.5707963267949)*(x1013.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1014=IKcos(j1);
IkReal x1015=IKsin(j1);
IkReal x1016=((0.054)*sj3);
IkReal x1017=((0.125)*cj2);
IkReal x1018=((0.054)*cj3);
IkReal x1019=(px*sj0);
IkReal x1020=((0.000799999744000123)*cj0);
IkReal x1021=((0.999999680000154)*sj0);
IkReal x1022=(cj0*px);
IkReal x1023=(py*x1015);
IkReal x1024=(sj2*x1015);
IkReal x1025=(pz*x1014);
IkReal x1026=(cj2*x1014);
IkReal x1027=(sj2*x1014);
IkReal x1028=(cj2*x1015);
IkReal x1029=(py*x1014);
evalcond[0]=(((x1014*x1017))+(((-1.0)*x1018*x1024))+(((0.182)*x1014))+(((-1.0)*pz))+((x1018*x1026))+(((-1.0)*x1016*x1028))+(((-1.0)*x1016*x1027))+(((-0.125)*x1024)));
evalcond[1]=(((cj2*x1016))+(((-1.0)*x1020*x1029))+(((0.125)*sj2))+((x1021*x1029))+((sj2*x1018))+((pz*x1015))+(((0.999999680000154)*x1014*x1022))+(((0.000799999744000123)*x1014*x1019)));
evalcond[2]=((0.182)+x1017+(((-1.0)*x1025))+((cj2*x1018))+(((-1.0)*x1020*x1023))+((x1021*x1023))+(((-1.0)*sj2*x1016))+(((0.999999680000154)*x1015*x1022))+(((0.000799999744000123)*x1015*x1019)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.000291199906816045)*x1015*x1019))+(((-0.363999883520056)*x1015*x1022))+(((-0.363999883520056)*sj0*x1023))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((0.000291199906816045)*cj0*x1023))+(((-1.0)*(py*py)))+(((0.364)*x1025)));
evalcond[4]=(((py*x1021))+(((0.999999680000154)*x1022))+(((-1.0)*py*x1020))+(((0.125)*x1027))+(((0.182)*x1015))+((x1018*x1027))+((x1018*x1028))+((x1015*x1017))+(((-1.0)*x1016*x1024))+(((0.000799999744000123)*x1019))+((x1016*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1030=cj3*cj3;
IkReal x1031=cj2*cj2;
IkReal x1032=(cj2*sj3);
IkReal x1033=((0.054)*pz);
IkReal x1034=(cj3*sj2);
IkReal x1035=(cj0*px);
IkReal x1036=(cj0*py);
IkReal x1037=((0.000799999744000123)*pz);
IkReal x1038=(py*sj0);
IkReal x1039=((0.124999960000019)*cj2);
IkReal x1040=(px*sj0);
IkReal x1041=(sj2*sj3);
IkReal x1042=((0.999999680000154)*pz);
IkReal x1043=(cj2*sj2);
IkReal x1044=(cj2*cj3);
IkReal x1045=((9.99999680000154e-5)*cj2);
IkReal x1046=(sj3*x1031);
IkReal x1047=((0.0539999827200083)*x1041);
IkReal x1048=((4.31999861760066e-5)*x1044);
IkReal x1049=((0.005832)*x1030);
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal(((-0.03604)+(((-0.019656)*x1044))+(((0.005832)*x1032*x1034))+(((0.019656)*x1041))+(((-1.0)*x1031*x1049))+(((-0.012709)*x1031))+(((0.002916)*x1030))+(((-0.0455)*cj2))+(pz*pz)+(((0.0135)*sj2*x1032))+(((-0.0135)*cj3*x1031)))),IkReal(((((-0.005832)*cj3*x1046))+(((-0.02275)*sj2))+(((-0.0135)*cj2*x1034))+((x1038*x1042))+(((0.002916)*cj3*sj3))+(((0.00675)*sj3))+((x1037*x1040))+(((-0.009828)*x1032))+(((-0.009828)*x1034))+(((-0.012709)*x1043))+((x1035*x1042))+(((-1.0)*x1036*x1037))+(((-1.0)*x1043*x1049))+(((-0.0135)*x1046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(IKsign((((x1038*x1039))+(((-1.0)*x1033*x1034))+(((-1.0)*x1038*x1047))+(((-1.0)*x1032*x1033))+(((0.000145599953408022)*x1040))+((x1040*x1048))+((x1040*x1045))+(((0.0539999827200083)*x1038*x1044))+(((-0.125)*pz*sj2))+(((0.0539999827200083)*x1035*x1044))+(((4.31999861760066e-5)*x1036*x1041))+(((-1.0)*x1035*x1047))+((x1035*x1039))+(((-1.0)*x1036*x1045))+(((-1.0)*x1036*x1048))+(((0.181999941760028)*x1035))+(((0.181999941760028)*x1038))+(((-4.31999861760066e-5)*x1040*x1041))+(((-0.000145599953408022)*x1036)))),-1);
if(!x1051.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1050.value)+(((1.5707963267949)*(x1051.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1052=IKcos(j1);
IkReal x1053=IKsin(j1);
IkReal x1054=((0.054)*sj3);
IkReal x1055=((0.125)*cj2);
IkReal x1056=((0.054)*cj3);
IkReal x1057=(px*sj0);
IkReal x1058=((0.000799999744000123)*cj0);
IkReal x1059=((0.999999680000154)*sj0);
IkReal x1060=(cj0*px);
IkReal x1061=(py*x1053);
IkReal x1062=(sj2*x1053);
IkReal x1063=(pz*x1052);
IkReal x1064=(cj2*x1052);
IkReal x1065=(sj2*x1052);
IkReal x1066=(cj2*x1053);
IkReal x1067=(py*x1052);
evalcond[0]=(((x1056*x1064))+(((0.182)*x1052))+((x1052*x1055))+(((-1.0)*pz))+(((-0.125)*x1062))+(((-1.0)*x1056*x1062))+(((-1.0)*x1054*x1065))+(((-1.0)*x1054*x1066)));
evalcond[1]=((((0.999999680000154)*x1052*x1060))+(((-1.0)*x1058*x1067))+(((0.000799999744000123)*x1052*x1057))+((pz*x1053))+((sj2*x1056))+(((0.125)*sj2))+((cj2*x1054))+((x1059*x1067)));
evalcond[2]=((0.182)+x1055+(((0.000799999744000123)*x1053*x1057))+(((0.999999680000154)*x1053*x1060))+(((-1.0)*x1058*x1061))+(((-1.0)*sj2*x1054))+((cj2*x1056))+((x1059*x1061))+(((-1.0)*x1063)));
evalcond[3]=((-0.014583)+(((-1.0)*(px*px)))+(((-0.363999883520056)*sj0*x1061))+(((0.000291199906816045)*cj0*x1061))+(((-1.0)*(pz*pz)))+(((0.364)*x1063))+(((-0.363999883520056)*x1053*x1060))+(((0.0135)*cj3))+(((-1.0)*(py*py)))+(((-0.000291199906816045)*x1053*x1057)));
evalcond[4]=(((x1056*x1065))+((x1056*x1066))+(((0.000799999744000123)*x1057))+(((0.182)*x1053))+((x1054*x1064))+((x1053*x1055))+(((0.125)*x1065))+((py*x1059))+(((-1.0)*py*x1058))+(((-1.0)*x1054*x1062))+(((0.999999680000154)*x1060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1068=cj2*cj2;
IkReal x1069=cj3*cj3;
IkReal x1070=(cj2*pz);
IkReal x1071=(cj2*sj3);
IkReal x1072=(cj3*sj2);
IkReal x1073=(py*sj2);
IkReal x1074=((0.000799999744000123)*pz);
IkReal x1075=(cj0*py);
IkReal x1076=(px*sj0);
IkReal x1077=(py*sj0);
IkReal x1078=((0.999999680000154)*pz);
IkReal x1079=(cj0*px);
IkReal x1080=(cj2*sj2);
IkReal x1081=((0.0135)*cj3);
IkReal x1082=(sj3*x1068);
IkReal x1083=((0.0539999827200083)*x1079);
IkReal x1084=((0.005832)*x1069);
CheckValue<IkReal> x1085 = IKatan2WithCheck(IkReal(((((-0.00675)*sj3))+((x1077*x1078))+((x1074*x1076))+(((-1.0)*x1074*x1075))+(((0.02275)*sj2))+(((0.005832)*cj3*x1082))+((x1078*x1079))+(((0.0135)*x1082))+(((0.012709)*x1080))+(((-0.002916)*cj3*sj3))+((x1080*x1084))+(((0.0135)*cj2*x1072))+(((0.009828)*x1072))+(((0.009828)*x1071)))),IkReal(((0.015625)+(((0.005832)*x1071*x1072))+x1081+(((-1.0)*x1068*x1081))+(((-1.0)*x1068*x1084))+(((0.0135)*sj2*x1071))+(((-0.012709)*x1068))+(((0.002916)*x1069))+(((-1.0)*(pz*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1085.valid){
continue;
}
CheckValue<IkReal> x1086=IKPowWithIntegerCheck(IKsign(((((-0.0539999827200083)*x1072*x1077))+(((-0.054)*cj3*x1070))+(((9.99999680000154e-5)*cj0*x1073))+(((-0.0539999827200083)*x1071*x1077))+(((-0.124999960000019)*sj2*x1079))+(((-4.31999861760066e-5)*x1072*x1076))+(((4.31999861760066e-5)*x1072*x1075))+(((-0.124999960000019)*sj0*x1073))+(((-0.125)*x1070))+(((-9.99999680000154e-5)*sj2*x1076))+(((-0.182)*pz))+(((-4.31999861760066e-5)*x1071*x1076))+(((4.31999861760066e-5)*x1071*x1075))+(((-1.0)*x1071*x1083))+(((0.054)*pz*sj2*sj3))+(((-1.0)*x1072*x1083)))),-1);
if(!x1086.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1085.value)+(((1.5707963267949)*(x1086.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1087=IKcos(j1);
IkReal x1088=IKsin(j1);
IkReal x1089=((0.054)*sj3);
IkReal x1090=((0.125)*cj2);
IkReal x1091=((0.054)*cj3);
IkReal x1092=(px*sj0);
IkReal x1093=((0.000799999744000123)*cj0);
IkReal x1094=((0.999999680000154)*sj0);
IkReal x1095=(cj0*px);
IkReal x1096=(py*x1088);
IkReal x1097=(sj2*x1088);
IkReal x1098=(pz*x1087);
IkReal x1099=(cj2*x1087);
IkReal x1100=(sj2*x1087);
IkReal x1101=(cj2*x1088);
IkReal x1102=(py*x1087);
evalcond[0]=(((x1087*x1090))+(((-1.0)*x1091*x1097))+(((-1.0)*pz))+(((-1.0)*x1089*x1101))+(((-1.0)*x1089*x1100))+((x1091*x1099))+(((0.182)*x1087))+(((-0.125)*x1097)));
evalcond[1]=(((x1094*x1102))+((pz*x1088))+(((-1.0)*x1093*x1102))+(((0.000799999744000123)*x1087*x1092))+(((0.999999680000154)*x1087*x1095))+(((0.125)*sj2))+((sj2*x1091))+((cj2*x1089)));
evalcond[2]=((0.182)+(((-1.0)*sj2*x1089))+x1090+(((0.999999680000154)*x1088*x1095))+((x1094*x1096))+(((-1.0)*x1098))+(((-1.0)*x1093*x1096))+((cj2*x1091))+(((0.000799999744000123)*x1088*x1092)));
evalcond[3]=((-0.014583)+(((-0.363999883520056)*sj0*x1096))+(((-1.0)*(px*px)))+(((-0.000291199906816045)*x1088*x1092))+(((0.364)*x1098))+(((0.000291199906816045)*cj0*x1096))+(((-1.0)*(pz*pz)))+(((0.0135)*cj3))+(((-1.0)*(py*py)))+(((-0.363999883520056)*x1088*x1095)));
evalcond[4]=((((-1.0)*py*x1093))+((x1089*x1099))+(((0.999999680000154)*x1095))+(((-1.0)*x1089*x1097))+((x1091*x1100))+((x1091*x1101))+((x1088*x1090))+(((0.125)*x1100))+(((0.000799999744000123)*x1092))+((py*x1094))+(((0.182)*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(4);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c26d7777bdc160ba709e1cb48d05cc20"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
